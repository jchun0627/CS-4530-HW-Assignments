{"files":{"C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\src\\lib\\CoveyTownController.ts":{"language":"typescript","mutants":[{"id":"8","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"src/lib/CoveyTownController.ts(148,55): error TS2345: Argument of type 'ServerConversationArea | undefined' is not assignable to parameter of type 'ServerConversationArea'.\r\n  Type 'undefined' is not assignable to type 'ServerConversationArea'.\r\nsrc/lib/CoveyTownController.ts(151,9): error TS2532: Object is possibly 'undefined'.\r\nsrc/lib/CoveyTownController.ts(152,80): error TS2345: Argument of type 'ServerConversationArea | undefined' is not assignable to parameter of type 'ServerConversationArea'.\r\n  Type 'undefined' is not assignable to type 'ServerConversationArea'.\r\n","status":"CompileError","estimatedNetTime":11,"hitCount":16,"static":false,"coveredBy":["2","6","13","18","20","21","22","23","24","25","26"],"location":{"end":{"column":42,"line":146},"start":{"column":9,"line":146}}},{"id":"11","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"src/lib/CoveyTownController.ts(148,55): error TS2345: Argument of type 'ServerConversationArea | undefined' is not assignable to parameter of type 'ServerConversationArea'.\r\n  Type 'undefined' is not assignable to type 'ServerConversationArea'.\r\n","status":"CompileError","estimatedNetTime":8,"hitCount":12,"static":false,"coveredBy":["20","21","22","23","24","25","26"],"location":{"end":{"column":27,"line":147},"start":{"column":11,"line":147}}},{"id":"1","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"src/lib/CoveyTownController.ts(125,61): error TS2345: Argument of type 'ServerConversationArea | undefined' is not assignable to parameter of type 'ServerConversationArea'.\r\n  Type 'undefined' is not assignable to type 'ServerConversationArea'.\r\n","status":"CompileError","estimatedNetTime":6,"hitCount":7,"static":false,"coveredBy":["3","7","8","14","16","17","26"],"location":{"end":{"column":21,"line":124},"start":{"column":9,"line":124}}},{"id":"0","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"src/lib/CoveyTownController.ts(125,61): error TS2345: Argument of type 'ServerConversationArea | undefined' is not assignable to parameter of type 'ServerConversationArea'.\r\n  Type 'undefined' is not assignable to type 'ServerConversationArea'.\r\n","status":"CompileError","estimatedNetTime":6,"hitCount":7,"static":false,"coveredBy":["3","7","8","14","16","17","26"],"location":{"end":{"column":21,"line":124},"start":{"column":9,"line":124}}},{"id":"12","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"src/lib/CoveyTownController.ts(148,55): error TS2345: Argument of type 'ServerConversationArea | undefined' is not assignable to parameter of type 'ServerConversationArea'.\r\n  Type 'undefined' is not assignable to type 'ServerConversationArea'.\r\n","status":"CompileError","estimatedNetTime":8,"hitCount":12,"static":false,"coveredBy":["20","21","22","23","24","25","26"],"location":{"end":{"column":27,"line":147},"start":{"column":11,"line":147}}},{"id":"15","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"src/lib/CoveyTownController.ts(151,9): error TS2532: Object is possibly 'undefined'.\r\nsrc/lib/CoveyTownController.ts(152,80): error TS2345: Argument of type 'ServerConversationArea | undefined' is not assignable to parameter of type 'ServerConversationArea'.\r\n  Type 'undefined' is not assignable to type 'ServerConversationArea'.\r\n","status":"CompileError","estimatedNetTime":8,"hitCount":12,"static":false,"coveredBy":["20","21","22","23","24","25","26"],"location":{"end":{"column":23,"line":150},"start":{"column":11,"line":150}}},{"id":"14","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"src/lib/CoveyTownController.ts(151,9): error TS2532: Object is possibly 'undefined'.\r\nsrc/lib/CoveyTownController.ts(152,80): error TS2345: Argument of type 'ServerConversationArea | undefined' is not assignable to parameter of type 'ServerConversationArea'.\r\n  Type 'undefined' is not assignable to type 'ServerConversationArea'.\r\n","status":"CompileError","estimatedNetTime":8,"hitCount":12,"static":false,"coveredBy":["20","21","22","23","24","25","26"],"location":{"end":{"column":23,"line":150},"start":{"column":11,"line":150}}},{"id":"7","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","estimatedNetTime":11,"hitCount":16,"static":false,"testsCompleted":11,"coveredBy":["2","6","13","18","20","21","22","23","24","25","26"],"location":{"end":{"column":42,"line":146},"start":{"column":9,"line":146}}},{"id":"17","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledTimes(expected)\n\nExpected number of calls: 1\nReceived number of calls: 0\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:304:54\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":11,"static":false,"testsCompleted":7,"killedBy":["21"],"coveredBy":["20","21","22","23","24","25","26"],"location":{"end":{"column":93,"line":152},"start":{"column":33,"line":152}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:287:45\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":11,"static":false,"testsCompleted":7,"killedBy":["20"],"coveredBy":["20","21","22","23","24","25","26"],"location":{"end":{"column":8,"line":153},"start":{"column":25,"line":150}}},{"id":"13","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 2\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:395:52\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":7,"hitCount":4,"static":false,"testsCompleted":3,"killedBy":["24"],"coveredBy":["20","24","25"],"location":{"end":{"column":8,"line":149},"start":{"column":29,"line":147}}},{"id":"34","mutatorName":"BlockStatement","replacement":"{}","statusReason":"src/lib/CoveyTownController.ts(191,67): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\r\n","status":"CompileError","estimatedNetTime":765,"hitCount":12,"static":false,"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":4,"line":210},"start":{"column":75,"line":191}}},{"id":"18","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Error: expect(jest.fn()).toBeCalledWith(...expected)\n\nExpected: {\"_activeConversationArea\": undefined, \"_id\": \"xR6N0aszqAhcxCrM1QMTP\", \"_userName\": \"test player\", \"location\": {\"moving\": true, \"rotation\": \"back\", \"x\": 19, \"y\": 69}}\n\nNumber of calls: 0\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:68:72\n    at Array.forEach (<anonymous>)\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:68:21\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":11,"hitCount":16,"static":false,"testsCompleted":11,"killedBy":["2"],"coveredBy":["2","6","13","18","20","21","22","23","24","25","26"],"location":{"end":{"column":71,"line":156},"start":{"column":29,"line":156}}},{"id":"20","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","estimatedNetTime":8,"hitCount":5,"static":false,"testsCompleted":4,"coveredBy":["20","24","25","26"],"location":{"end":{"column":94,"line":169},"start":{"column":79,"line":169}}},{"id":"6","mutatorName":"EqualityOperator","replacement":"conv.label !== location.conversationLabel","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: \"md2oya5TeYLSsPNexYl6F\"\nReceived: \"3DPIhtuYosbaQxzDdyY7q\"\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:276:52\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":15,"static":false,"testsCompleted":7,"killedBy":["20"],"coveredBy":["20","21","22","23","24","25","26"],"location":{"end":{"column":103,"line":140},"start":{"column":62,"line":140}}},{"id":"22","mutatorName":"EqualityOperator","replacement":"p !== player.id","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: undefined\nReceived: \"V78ZIZHFXijiEu8De9-lU\"\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:453:100\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":5,"static":false,"testsCompleted":4,"killedBy":["25"],"coveredBy":["20","24","25","26"],"location":{"end":{"column":94,"line":169},"start":{"column":79,"line":169}}},{"id":"19","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: undefined\nReceived: \"3XrIGKl6o0iYPZAlPher4\"\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:453:100\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":5,"static":false,"testsCompleted":4,"killedBy":["25"],"coveredBy":["20","24","25","26"],"location":{"end":{"column":94,"line":169},"start":{"column":76,"line":169}}},{"id":"10","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:287:45\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":12,"static":false,"testsCompleted":7,"killedBy":["20"],"coveredBy":["20","21","22","23","24","25","26"],"location":{"end":{"column":6,"line":154},"start":{"column":44,"line":146}}},{"id":"9","mutatorName":"EqualityOperator","replacement":"conversation === prevConversation","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:287:45\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":11,"hitCount":16,"static":false,"testsCompleted":11,"killedBy":["20"],"coveredBy":["2","6","13","18","20","21","22","23","24","25","26"],"location":{"end":{"column":42,"line":146},"start":{"column":9,"line":146}}},{"id":"23","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: undefined\nReceived: \"X4n0dpKZLVSU5swqAIpDW\"\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:453:100\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":5,"static":false,"testsCompleted":4,"killedBy":["25"],"coveredBy":["20","24","25","26"],"location":{"end":{"column":48,"line":170},"start":{"column":9,"line":170}}},{"id":"5","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: \"tYosdfsTYbEa0Muxc0Xzq\"\nReceived: undefined\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:276:52\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":15,"static":false,"testsCompleted":7,"killedBy":["20"],"coveredBy":["20","21","22","23","24","25","26"],"location":{"end":{"column":103,"line":140},"start":{"column":62,"line":140}}},{"id":"2","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toBeUndefined()\n\nReceived: \"tEcrFc2spTcmAARingQ4s\"\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:492:27\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":1,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26"],"location":{"end":{"column":6,"line":126},"start":{"column":23,"line":124}}},{"id":"3","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: \"cOx22N9-mMEP_XGFZF9ca\"\nReceived: undefined\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:276:52\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":11,"hitCount":16,"static":false,"testsCompleted":11,"killedBy":["20"],"coveredBy":["2","6","13","18","20","21","22","23","24","25","26"],"location":{"end":{"column":103,"line":140},"start":{"column":54,"line":140}}},{"id":"4","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: \"uIxw17ooL_CpCbkik40NY\"\nReceived: \"L8S8vphEYya6xI6gx6jkf\"\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:282:52\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":15,"static":false,"testsCompleted":7,"killedBy":["20"],"coveredBy":["20","21","22","23","24","25","26"],"location":{"end":{"column":103,"line":140},"start":{"column":62,"line":140}}},{"id":"24","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:287:45\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":5,"static":false,"testsCompleted":4,"killedBy":["20"],"coveredBy":["20","24","25","26"],"location":{"end":{"column":48,"line":170},"start":{"column":9,"line":170}}},{"id":"21","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: undefined\nReceived: \"ubvQorqju55iRmyljKTbb\"\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:453:100\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":5,"static":false,"testsCompleted":4,"killedBy":["25"],"coveredBy":["20","24","25","26"],"location":{"end":{"column":94,"line":169},"start":{"column":79,"line":169}}},{"id":"25","mutatorName":"EqualityOperator","replacement":"conversation.occupantsByID.length !== 0","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:287:45\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":5,"static":false,"testsCompleted":4,"killedBy":["20"],"coveredBy":["20","24","25","26"],"location":{"end":{"column":48,"line":170},"start":{"column":9,"line":170}}},{"id":"41","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":19,"line":195},"start":{"column":14,"line":195}}},{"id":"26","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:287:45\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":4,"static":false,"testsCompleted":3,"killedBy":["20"],"coveredBy":["20","24","26"],"location":{"end":{"column":6,"line":173},"start":{"column":50,"line":170}}},{"id":"28","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","estimatedNetTime":8,"hitCount":4,"static":false,"testsCompleted":3,"coveredBy":["20","24","26"],"location":{"end":{"column":101,"line":171},"start":{"column":80,"line":171}}},{"id":"27","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:287:45\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":4,"static":false,"testsCompleted":3,"killedBy":["20"],"coveredBy":["20","24","26"],"location":{"end":{"column":101,"line":171},"start":{"column":72,"line":171}}},{"id":"29","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:287:45\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":4,"static":false,"testsCompleted":3,"killedBy":["20"],"coveredBy":["20","24","26"],"location":{"end":{"column":101,"line":171},"start":{"column":80,"line":171}}},{"id":"46","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":6,"line":198},"start":{"column":40,"line":196}}},{"id":"47","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":19,"line":197},"start":{"column":14,"line":197}}},{"id":"31","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledTimes(expected)\n\nExpected number of calls: 1\nReceived number of calls: 0\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:397:56\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":4,"static":false,"testsCompleted":3,"killedBy":["24"],"coveredBy":["20","24","26"],"location":{"end":{"column":93,"line":172},"start":{"column":31,"line":172}}},{"id":"30","mutatorName":"EqualityOperator","replacement":"conv !== conversation","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 0\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:287:45\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":8,"hitCount":4,"static":false,"testsCompleted":3,"killedBy":["20"],"coveredBy":["20","24","26"],"location":{"end":{"column":101,"line":171},"start":{"column":80,"line":171}}},{"id":"33","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"coveredBy":["25"],"location":{"end":{"column":91,"line":174},"start":{"column":31,"line":174}}},{"id":"32","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","estimatedNetTime":0,"hitCount":1,"static":false,"testsCompleted":1,"coveredBy":["25"],"location":{"end":{"column":6,"line":175},"start":{"column":12,"line":173}}},{"id":"39","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":93,"line":193},"start":{"column":35,"line":193}}},{"id":"38","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:270:27\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:27:71\n    at new Promise (<anonymous>)\n    at Object.<anonymous>.__awaiter (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:23:12)\n    at Object.<anonymous> (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:264:159)\n    at Object.asyncJestTest (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)","status":"Killed","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"killedBy":["20"],"coveredBy":["20","24","25"],"location":{"end":{"column":93,"line":193},"start":{"column":35,"line":193}}},{"id":"40","mutatorName":"EqualityOperator","replacement":"eachExistingConversation.label !== _conversationArea.label","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:270:27\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:27:71\n    at new Promise (<anonymous>)\n    at Object.<anonymous>.__awaiter (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:23:12)\n    at Object.<anonymous> (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:264:159)\n    at Object.asyncJestTest (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)","status":"Killed","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"killedBy":["20"],"coveredBy":["20","24","25"],"location":{"end":{"column":93,"line":193},"start":{"column":35,"line":193}}},{"id":"36","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":765,"hitCount":12,"static":false,"testsCompleted":9,"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":6,"line":194},"start":{"column":9,"line":192}}},{"id":"42","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:250:22)\n    at Object.asyncJestTest (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41","status":"Killed","estimatedNetTime":765,"hitCount":12,"static":false,"testsCompleted":9,"killedBy":["19"],"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":39,"line":196},"start":{"column":9,"line":196}}},{"id":"37","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived","estimatedNetTime":765,"hitCount":12,"static":false,"testsCompleted":9,"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":93,"line":193},"start":{"column":7,"line":193}}},{"id":"35","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:250:22)\n    at Object.asyncJestTest (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41","status":"Killed","estimatedNetTime":765,"hitCount":12,"static":false,"testsCompleted":9,"killedBy":["19"],"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":6,"line":194},"start":{"column":9,"line":192}}},{"id":"52","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":6,"line":202},"start":{"column":124,"line":200}}},{"id":"53","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":19,"line":201},"start":{"column":14,"line":201}}},{"id":"44","mutatorName":"EqualityOperator","replacement":"_conversationArea.topic !== ''","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at Object.<anonymous> (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:250:22)\n    at Object.asyncJestTest (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41","status":"Killed","estimatedNetTime":765,"hitCount":12,"static":false,"testsCompleted":9,"killedBy":["19"],"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":39,"line":196},"start":{"column":9,"line":196}}},{"id":"55","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":91,"line":206},"start":{"column":49,"line":206}}},{"id":"56","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"src/lib/CoveyTownController.ts(207,5): error TS2322: Type 'undefined[]' is not assignable to type 'string[]'.\r\n  Type 'undefined' is not assignable to type 'string'.\r\n","status":"CompileError","estimatedNetTime":765,"hitCount":12,"static":false,"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":78,"line":207},"start":{"column":59,"line":207}}},{"id":"45","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived","estimatedNetTime":765,"hitCount":12,"static":false,"testsCompleted":9,"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":39,"line":196},"start":{"column":37,"line":196}}},{"id":"59","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"src/lib/CoveyTownController.ts(222,32): error TS2554: Expected 0 arguments, but got 1.\r\nsrc/lib/CoveyTownController.ts(223,32): error TS2554: Expected 0 arguments, but got 1.\r\nsrc/lib/CoveyTownController.ts(224,23): error TS2532: Object is possibly 'undefined'.\r\nsrc/lib/CoveyTownController.ts(224,35): error TS2532: Object is possibly 'undefined'.\r\nsrc/lib/CoveyTownController.ts(224,47): error TS2532: Object is possibly 'undefined'.\r\nsrc/lib/CoveyTownController.ts(224,59): error TS2532: Object is possibly 'undefined'.\r\nsrc/lib/CoveyTownController.ts(224,71): error TS2532: Object is possibly 'undefined'.\r\nsrc/lib/CoveyTownController.ts(224,83): error TS2532: Object is possibly 'undefined'.\r\nsrc/lib/CoveyTownController.ts(224,95): error TS2532: Object is possibly 'undefined'.\r\nsrc/lib/CoveyTownController.ts(224,107): error TS2532: Object is possibly 'undefined'.\r\n","status":"CompileError","estimatedNetTime":7,"hitCount":3,"static":false,"coveredBy":["20","24","25"],"location":{"end":{"column":162,"line":221},"start":{"column":26,"line":221}}},{"id":"43","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":765,"hitCount":12,"static":false,"testsCompleted":9,"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":39,"line":196},"start":{"column":9,"line":196}}},{"id":"48","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: Error processing request: Unable to create conversation area zXx4iOnhdMIywmg3RA-A1 with topic FBbnos8_ati9tl2G0-N1_\n    at Function.Object.<anonymous>.TownsServiceClient.unwrapOrThrowError (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\TownsServiceClient.ts:149:11)\n    at TownsServiceClient.<anonymous> (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\TownsServiceClient.ts:179:31)\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\TownsServiceClient.ts:33:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\TownsServiceClient.ts:14:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\TownsServiceClient.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","status":"Killed","estimatedNetTime":765,"hitCount":12,"static":false,"testsCompleted":9,"killedBy":["27"],"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":123,"line":200},"start":{"column":9,"line":199}}},{"id":"50","mutatorName":"EqualityOperator","replacement":"this._conversationAreas.find(eachExistingConversation => CoveyTownController.boxesOverlap(eachExistingConversation.boundingBox, _conversationArea.boundingBox)) === undefined","statusReason":"Error: Error processing request: Unable to create conversation area HsNCWHhbvGFIVBAMeHe9L with topic l_YmGFHgDG-hPmFhHiolG\n    at Function.Object.<anonymous>.TownsServiceClient.unwrapOrThrowError (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\TownsServiceClient.ts:149:11)\n    at TownsServiceClient.<anonymous> (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\TownsServiceClient.ts:179:31)\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\TownsServiceClient.ts:33:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\TownsServiceClient.ts:14:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\TownsServiceClient.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","status":"Killed","estimatedNetTime":765,"hitCount":12,"static":false,"testsCompleted":9,"killedBy":["27"],"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":123,"line":200},"start":{"column":9,"line":199}}},{"id":"54","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived","estimatedNetTime":765,"hitCount":12,"static":false,"testsCompleted":9,"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":93,"line":205},"start":{"column":59,"line":205}}},{"id":"49","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":765,"hitCount":12,"static":false,"testsCompleted":9,"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":123,"line":200},"start":{"column":9,"line":199}}},{"id":"51","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived","estimatedNetTime":765,"hitCount":12,"static":false,"testsCompleted":9,"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":108,"line":200},"start":{"column":38,"line":199}}},{"id":"57","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived","estimatedNetTime":765,"hitCount":12,"static":false,"testsCompleted":9,"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":84,"line":208},"start":{"column":29,"line":208}}},{"id":"60","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"src/lib/CoveyTownController.ts(224,29): error TS2339: Property 'x1' does not exist on type '{}'.\r\nsrc/lib/CoveyTownController.ts(224,41): error TS2339: Property 'x2' does not exist on type '{}'.\r\nsrc/lib/CoveyTownController.ts(224,53): error TS2339: Property 'x1' does not exist on type '{}'.\r\nsrc/lib/CoveyTownController.ts(224,65): error TS2339: Property 'x2' does not exist on type '{}'.\r\nsrc/lib/CoveyTownController.ts(224,77): error TS2339: Property 'y1' does not exist on type '{}'.\r\nsrc/lib/CoveyTownController.ts(224,89): error TS2339: Property 'y2' does not exist on type '{}'.\r\nsrc/lib/CoveyTownController.ts(224,101): error TS2339: Property 'y1' does not exist on type '{}'.\r\nsrc/lib/CoveyTownController.ts(224,113): error TS2339: Property 'y2' does not exist on type '{}'.\r\n","status":"CompileError","estimatedNetTime":7,"hitCount":6,"static":false,"coveredBy":["20","24","25"],"location":{"end":{"column":161,"line":221},"start":{"column":49,"line":221}}},{"id":"58","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Error: Error processing request: Unable to create conversation area uVnJhC739qusQQoHdWi71 with topic fCEdFTLNCtjXLK22SzAoS\n    at Function.Object.<anonymous>.TownsServiceClient.unwrapOrThrowError (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\TownsServiceClient.ts:149:11)\n    at TownsServiceClient.<anonymous> (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\TownsServiceClient.ts:179:31)\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\TownsServiceClient.ts:33:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\TownsServiceClient.ts:14:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\TownsServiceClient.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)","status":"Killed","estimatedNetTime":765,"hitCount":12,"static":false,"testsCompleted":9,"killedBy":["27"],"coveredBy":["19","20","21","22","23","24","25","26","27"],"location":{"end":{"column":16,"line":209},"start":{"column":12,"line":209}}},{"id":"62","mutatorName":"ArithmeticOperator","replacement":"box.width * 2","status":"Survived","estimatedNetTime":7,"hitCount":6,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":76,"line":221},"start":{"column":63,"line":221}}},{"id":"61","mutatorName":"ArithmeticOperator","replacement":"box.x + box.width / 2","status":"Survived","estimatedNetTime":7,"hitCount":6,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":76,"line":221},"start":{"column":55,"line":221}}},{"id":"64","mutatorName":"ArithmeticOperator","replacement":"box.width * 2","status":"Survived","estimatedNetTime":7,"hitCount":6,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":103,"line":221},"start":{"column":90,"line":221}}},{"id":"66","mutatorName":"ArithmeticOperator","replacement":"box.height * 2","status":"Survived","estimatedNetTime":7,"hitCount":6,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":131,"line":221},"start":{"column":117,"line":221}}},{"id":"63","mutatorName":"ArithmeticOperator","replacement":"box.x - box.width / 2","status":"Survived","estimatedNetTime":7,"hitCount":6,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":103,"line":221},"start":{"column":82,"line":221}}},{"id":"67","mutatorName":"ArithmeticOperator","replacement":"box.y - box.height / 2","status":"Survived","estimatedNetTime":7,"hitCount":6,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":159,"line":221},"start":{"column":137,"line":221}}},{"id":"65","mutatorName":"ArithmeticOperator","replacement":"box.y + box.height / 2","status":"Survived","estimatedNetTime":7,"hitCount":6,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":131,"line":221},"start":{"column":109,"line":221}}},{"id":"68","mutatorName":"ArithmeticOperator","replacement":"box.height * 2","status":"Survived","estimatedNetTime":7,"hitCount":6,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":159,"line":221},"start":{"column":145,"line":221}}},{"id":"69","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":115,"line":224},"start":{"column":23,"line":224}}},{"id":"70","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:270:27\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:27:71\n    at new Promise (<anonymous>)\n    at Object.<anonymous>.__awaiter (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:23:12)\n    at Object.<anonymous> (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:264:159)\n    at Object.asyncJestTest (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)","status":"Killed","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"killedBy":["20"],"coveredBy":["20","24","25"],"location":{"end":{"column":115,"line":224},"start":{"column":23,"line":224}}},{"id":"71","mutatorName":"LogicalOperator","replacement":"(rect1.x1 >= rect2.x2 || rect2.x1 >= rect1.x2 || rect1.y1 >= rect2.y2) && rect2.y1 >= rect1.y2","status":"Survived","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":115,"line":224},"start":{"column":23,"line":224}}},{"id":"83","mutatorName":"EqualityOperator","replacement":"rect1.y1 > rect2.y2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":91,"line":224},"start":{"column":71,"line":224}}},{"id":"82","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":91,"line":224},"start":{"column":71,"line":224}}},{"id":"72","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":91,"line":224},"start":{"column":23,"line":224}}},{"id":"74","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":67,"line":224},"start":{"column":23,"line":224}}},{"id":"73","mutatorName":"LogicalOperator","replacement":"(rect1.x1 >= rect2.x2 || rect2.x1 >= rect1.x2) && rect1.y1 >= rect2.y2","status":"Survived","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":91,"line":224},"start":{"column":23,"line":224}}},{"id":"75","mutatorName":"LogicalOperator","replacement":"rect1.x1 >= rect2.x2 && rect2.x1 >= rect1.x2","status":"Survived","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":67,"line":224},"start":{"column":23,"line":224}}},{"id":"76","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":43,"line":224},"start":{"column":23,"line":224}}},{"id":"77","mutatorName":"EqualityOperator","replacement":"rect1.x1 > rect2.x2","status":"Survived","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":43,"line":224},"start":{"column":23,"line":224}}},{"id":"78","mutatorName":"EqualityOperator","replacement":"rect1.x1 < rect2.x2","status":"Survived","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":43,"line":224},"start":{"column":23,"line":224}}},{"id":"80","mutatorName":"EqualityOperator","replacement":"rect2.x1 > rect1.x2","status":"Survived","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":67,"line":224},"start":{"column":47,"line":224}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":67,"line":224},"start":{"column":47,"line":224}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"rect2.x1 < rect1.x2","status":"Survived","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"coveredBy":["20","24","25"],"location":{"end":{"column":67,"line":224},"start":{"column":47,"line":224}}},{"id":"85","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":115,"line":224},"start":{"column":95,"line":224}}},{"id":"86","mutatorName":"EqualityOperator","replacement":"rect2.y1 > rect1.y2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":115,"line":224},"start":{"column":95,"line":224}}},{"id":"84","mutatorName":"EqualityOperator","replacement":"rect1.y1 < rect2.y2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":91,"line":224},"start":{"column":71,"line":224}}},{"id":"87","mutatorName":"EqualityOperator","replacement":"rect2.y1 < rect1.y2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":115,"line":224},"start":{"column":95,"line":224}}},{"id":"88","mutatorName":"BooleanLiteral","replacement":"noOverlap","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:270:27\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:27:71\n    at new Promise (<anonymous>)\n    at Object.<anonymous>.__awaiter (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:23:12)\n    at Object.<anonymous> (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:264:159)\n    at Object.asyncJestTest (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)","status":"Killed","estimatedNetTime":7,"hitCount":3,"static":false,"testsCompleted":3,"killedBy":["20"],"coveredBy":["20","24","25"],"location":{"end":{"column":22,"line":225},"start":{"column":12,"line":225}}}],"source":"import { customAlphabet, nanoid } from 'nanoid';\r\nimport { BoundingBox, ServerConversationArea } from '../client/TownsServiceClient';\r\nimport { UserLocation } from '../CoveyTypes';\r\nimport CoveyTownListener from '../types/CoveyTownListener';\r\nimport Player from '../types/Player';\r\nimport PlayerSession from '../types/PlayerSession';\r\nimport IVideoClient from './IVideoClient';\r\nimport TwilioVideo from './TwilioVideo';\r\n\r\nconst friendlyNanoID = customAlphabet('1234567890ABCDEF', 8);\r\n\r\n/**\r\n * The CoveyTownController implements the logic for each town: managing the various events that\r\n * can occur (e.g. joining a town, moving, leaving a town)\r\n */\r\nexport default class CoveyTownController {\r\n  get capacity(): number {\r\n    return this._capacity;\r\n  }\r\n\r\n  set isPubliclyListed(value: boolean) {\r\n    this._isPubliclyListed = value;\r\n  }\r\n\r\n  get isPubliclyListed(): boolean {\r\n    return this._isPubliclyListed;\r\n  }\r\n\r\n  get townUpdatePassword(): string {\r\n    return this._townUpdatePassword;\r\n  }\r\n\r\n  get players(): Player[] {\r\n    return this._players;\r\n  }\r\n\r\n  get occupancy(): number {\r\n    return this._listeners.length;\r\n  }\r\n\r\n  get friendlyName(): string {\r\n    return this._friendlyName;\r\n  }\r\n\r\n  set friendlyName(value: string) {\r\n    this._friendlyName = value;\r\n  }\r\n\r\n  get coveyTownID(): string {\r\n    return this._coveyTownID;\r\n  }\r\n\r\n  get conversationAreas(): ServerConversationArea[] {\r\n    return this._conversationAreas;\r\n  }\r\n\r\n  /** The list of players currently in the town * */\r\n  private _players: Player[] = [];\r\n\r\n  /** The list of valid sessions for this town * */\r\n  private _sessions: PlayerSession[] = [];\r\n\r\n  /** The videoClient that this CoveyTown will use to provision video resources * */\r\n  private _videoClient: IVideoClient = TwilioVideo.getInstance();\r\n\r\n  /** The list of CoveyTownListeners that are subscribed to events in this town * */\r\n  private _listeners: CoveyTownListener[] = [];\r\n\r\n  /** The list of currently active ConversationAreas in this town */\r\n  private _conversationAreas: ServerConversationArea[] = [];\r\n\r\n  private readonly _coveyTownID: string;\r\n\r\n  private _friendlyName: string;\r\n\r\n  private readonly _townUpdatePassword: string;\r\n\r\n  private _isPubliclyListed: boolean;\r\n\r\n  private _capacity: number;\r\n\r\n  constructor(friendlyName: string, isPubliclyListed: boolean) {\r\n    this._coveyTownID = process.env.DEMO_TOWN_ID === friendlyName ? friendlyName : friendlyNanoID();\r\n    this._capacity = 50;\r\n    this._townUpdatePassword = nanoid(24);\r\n    this._isPubliclyListed = isPubliclyListed;\r\n    this._friendlyName = friendlyName;\r\n  }\r\n\r\n  /**\r\n   * Adds a player to this Covey Town, provisioning the necessary credentials for the\r\n   * player, and returning them\r\n   *\r\n   * @param newPlayer The new player to add to the town\r\n   */\r\n  async addPlayer(newPlayer: Player): Promise<PlayerSession> {\r\n    const theSession = new PlayerSession(newPlayer);\r\n\r\n    this._sessions.push(theSession);\r\n    this._players.push(newPlayer);\r\n\r\n    // Create a video token for this user to join this town\r\n    theSession.videoToken = await this._videoClient.getTokenForTown(\r\n      this._coveyTownID,\r\n      newPlayer.id,\r\n    );\r\n\r\n    // Notify other players that this player has joined\r\n    this._listeners.forEach(listener => listener.onPlayerJoined(newPlayer));\r\n\r\n    return theSession;\r\n  }\r\n\r\n  /**\r\n   * Destroys all data related to a player in this town.\r\n   *\r\n   * @param session PlayerSession to destroy\r\n   */\r\n  destroySession(session: PlayerSession): void {\r\n    this._players = this._players.filter(p => p.id !== session.player.id);\r\n    this._sessions = this._sessions.filter(s => s.sessionToken !== session.sessionToken);\r\n    this._listeners.forEach(listener => listener.onPlayerDisconnected(session.player));\r\n    const conversation = session.player.activeConversationArea;\r\n    if (conversation) {\r\n      this.removePlayerFromConversationArea(session.player, conversation);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the location of a player within the town\r\n   * \r\n   * If the player has changed conversation areas, this method also updates the\r\n   * corresponding ConversationArea objects tracked by the town controller, and dispatches\r\n   * any onConversationUpdated events as appropriate\r\n   * \r\n   * @param player Player to update location for\r\n   * @param location New location for this player\r\n   */\r\n  updatePlayerLocation(player: Player, location: UserLocation): void {\r\n    const conversation = this.conversationAreas.find(conv => conv.label === location.conversationLabel);\r\n    const prevConversation = player.activeConversationArea;\r\n\r\n    player.location = location;\r\n    player.activeConversationArea = conversation;\r\n\r\n    if (conversation !== prevConversation) {\r\n      if (prevConversation) {\r\n        this.removePlayerFromConversationArea(player, prevConversation);\r\n      }\r\n      if (conversation) {\r\n        conversation.occupantsByID.push(player.id);\r\n        this._listeners.forEach(listener => listener.onConversationAreaUpdated(conversation));\r\n      }\r\n    }\r\n\r\n    this._listeners.forEach(listener => listener.onPlayerMoved(player));\r\n  }\r\n\r\n  /**\r\n   * Removes a player from a conversation area, updating the conversation area's occupants list, \r\n   * and emitting the appropriate message (area updated or area destroyed)\r\n   * \r\n   * Does not update the player's activeConversationArea property.\r\n   * \r\n   * @param player Player to remove from conversation area\r\n   * @param conversation Conversation area to remove player from\r\n   */\r\n  removePlayerFromConversationArea(player: Player, conversation: ServerConversationArea) : void {\r\n    conversation.occupantsByID.splice(conversation.occupantsByID.findIndex(p=>p === player.id), 1);\r\n    if (conversation.occupantsByID.length === 0) {\r\n      this._conversationAreas.splice(this._conversationAreas.findIndex(conv => conv === conversation), 1);\r\n      this._listeners.forEach(listener => listener.onConversationAreaDestroyed(conversation));\r\n    } else {\r\n      this._listeners.forEach(listener => listener.onConversationAreaUpdated(conversation));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new conversation area in this town if there is not currently an active\r\n   * conversation with the same label.\r\n   *\r\n   * Adds any players who are in the region defined by the conversation area to it.\r\n   *\r\n   * Notifies any CoveyTownListeners that the conversation has been updated\r\n   *\r\n   * @param _conversationArea Information describing the conversation area to create. Ignores any\r\n   *  occupantsById that are set on the conversation area that is passed to this method.\r\n   *\r\n   * @returns true if the conversation is successfully created, or false if not\r\n   */\r\n  addConversationArea(_conversationArea: ServerConversationArea): boolean {\r\n    if (this._conversationAreas.find(\r\n      eachExistingConversation => eachExistingConversation.label === _conversationArea.label,\r\n    ))\r\n      return false;\r\n    if (_conversationArea.topic === ''){\r\n      return false;\r\n    }\r\n    if (this._conversationAreas.find(eachExistingConversation => \r\n      CoveyTownController.boxesOverlap(eachExistingConversation.boundingBox, _conversationArea.boundingBox)) !== undefined){\r\n      return false;\r\n    }\r\n    const newArea :ServerConversationArea = Object.assign(_conversationArea);\r\n    this._conversationAreas.push(newArea);\r\n    const playersInThisConversation = this.players.filter(player => player.isWithin(newArea));\r\n    playersInThisConversation.forEach(player => {player.activeConversationArea = newArea;});\r\n    newArea.occupantsByID = playersInThisConversation.map(player => player.id);\r\n    this._listeners.forEach(listener => listener.onConversationAreaUpdated(newArea));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Detects whether two bounding boxes overlap and share any points\r\n   * \r\n   * @param box1 \r\n   * @param box2 \r\n   * @returns true if the boxes overlap, otherwise false\r\n   */\r\n  static boxesOverlap(box1: BoundingBox, box2: BoundingBox):boolean{\r\n    // Helper function to extract the top left (x1,y1) and bottom right corner (x2,y2) of each bounding box\r\n    const toRectPoints = (box: BoundingBox) => ({ x1: box.x - box.width / 2, x2: box.x + box.width / 2, y1: box.y - box.height / 2, y2: box.y + box.height / 2 });\r\n    const rect1 = toRectPoints(box1);\r\n    const rect2 = toRectPoints(box2);\r\n    const noOverlap = rect1.x1 >= rect2.x2 || rect2.x1 >= rect1.x2 || rect1.y1 >= rect2.y2 || rect2.y1 >= rect1.y2;\r\n    return !noOverlap;\r\n  }\r\n\r\n  /**\r\n   * Subscribe to events from this town. Callers should make sure to\r\n   * unsubscribe when they no longer want those events by calling removeTownListener\r\n   *\r\n   * @param listener New listener\r\n   */\r\n  addTownListener(listener: CoveyTownListener): void {\r\n    this._listeners.push(listener);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from events in this town.\r\n   *\r\n   * @param listener The listener to unsubscribe, must be a listener that was registered\r\n   * with addTownListener, or otherwise will be a no-op\r\n   */\r\n  removeTownListener(listener: CoveyTownListener): void {\r\n    this._listeners = this._listeners.filter(v => v !== listener);\r\n  }\r\n\r\n  /**\r\n   * Fetch a player's session based on the provided session token. Returns undefined if the\r\n   * session token is not valid.\r\n   *\r\n   * @param token\r\n   */\r\n  getSessionByToken(token: string): PlayerSession | undefined {\r\n    return this._sessions.find(p => p.sessionToken === token);\r\n  }\r\n\r\n  disconnectAllPlayers(): void {\r\n    this._listeners.forEach(listener => listener.onTownDestroyed());\r\n  }\r\n\r\n}\r\n"},"C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\src\\requestHandlers\\CoveyTownRequestHandlers.ts":{"language":"typescript","mutants":[{"id":"89","mutatorName":"BlockStatement","replacement":"{}","statusReason":"src/requestHandlers/CoveyTownRequestHandlers.ts(184,94): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\r\n","status":"CompileError","estimatedNetTime":757,"hitCount":2,"static":false,"coveredBy":["27","28"],"location":{"end":{"column":2,"line":199},"start":{"column":133,"line":184}}},{"id":"90","mutatorName":"BooleanLiteral","replacement":"townController?.getSessionByToken(_requestData.sessionToken)","statusReason":"src/requestHandlers/CoveyTownRequestHandlers.ts(192,19): error TS2532: Object is possibly 'undefined'.\r\n","status":"CompileError","estimatedNetTime":757,"hitCount":2,"static":false,"coveredBy":["27","28"],"location":{"end":{"column":68,"line":187},"start":{"column":7,"line":187}}},{"id":"92","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"src/requestHandlers/CoveyTownRequestHandlers.ts(192,19): error TS2532: Object is possibly 'undefined'.\r\n","status":"CompileError","estimatedNetTime":757,"hitCount":2,"static":false,"coveredBy":["27","28"],"location":{"end":{"column":68,"line":187},"start":{"column":7,"line":187}}},{"id":"91","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"src/requestHandlers/CoveyTownRequestHandlers.ts(192,19): error TS2532: Object is possibly 'undefined'.\r\n","status":"CompileError","estimatedNetTime":757,"hitCount":2,"static":false,"coveredBy":["27","28"],"location":{"end":{"column":68,"line":187},"start":{"column":7,"line":187}}},{"id":"94","mutatorName":"BlockStatement","replacement":"{}","statusReason":"src/requestHandlers/CoveyTownRequestHandlers.ts(188,19): error TS2532: Object is possibly 'undefined'.\r\n","status":"CompileError","estimatedNetTime":1,"hitCount":1,"static":false,"coveredBy":["28"],"location":{"end":{"column":4,"line":191},"start":{"column":69,"line":187}}},{"id":"93","mutatorName":"OptionalChaining","replacement":"townController.getSessionByToken","statusReason":"src/requestHandlers/CoveyTownRequestHandlers.ts(187,8): error TS2532: Object is possibly 'undefined'.\r\nsrc/requestHandlers/CoveyTownRequestHandlers.ts(192,19): error TS2532: Object is possibly 'undefined'.\r\n","status":"CompileError","estimatedNetTime":757,"hitCount":2,"static":false,"coveredBy":["27","28"],"location":{"end":{"column":41,"line":187},"start":{"column":8,"line":187}}},{"id":"95","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"src/requestHandlers/CoveyTownRequestHandlers.ts(188,5): error TS2741: Property 'isOK' is missing in type '{}' but required in type 'ResponseEnvelope<Record<string, null>>'.\r\n","status":"CompileError","estimatedNetTime":1,"hitCount":1,"static":false,"coveredBy":["28"],"location":{"end":{"column":6,"line":190},"start":{"column":12,"line":188}}},{"id":"98","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"src/requestHandlers/CoveyTownRequestHandlers.ts(194,3): error TS2741: Property 'isOK' is missing in type '{}' but required in type 'ResponseEnvelope<Record<string, null>>'.\r\n","status":"CompileError","estimatedNetTime":756,"hitCount":1,"static":false,"coveredBy":["27"],"location":{"end":{"column":4,"line":198},"start":{"column":10,"line":194}}},{"id":"100","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":150,"line":197},"start":{"column":25,"line":197}}},{"id":"97","mutatorName":"StringLiteral","replacement":"``","status":"Survived","estimatedNetTime":1,"hitCount":1,"static":false,"testsCompleted":1,"coveredBy":["28"],"location":{"end":{"column":168,"line":189},"start":{"column":43,"line":189}}},{"id":"96","mutatorName":"BooleanLiteral","replacement":"true","status":"Survived","estimatedNetTime":1,"hitCount":1,"static":false,"testsCompleted":1,"coveredBy":["28"],"location":{"end":{"column":18,"line":189},"start":{"column":13,"line":189}}},{"id":"99","mutatorName":"BooleanLiteral","replacement":"success","status":"Survived","estimatedNetTime":756,"hitCount":1,"static":false,"testsCompleted":1,"coveredBy":["27"],"location":{"end":{"column":22,"line":197},"start":{"column":14,"line":197}}}],"source":"import assert from 'assert';\r\nimport { Socket } from 'socket.io';\r\nimport Player from '../types/Player';\r\nimport { CoveyTownList, UserLocation } from '../CoveyTypes';\r\nimport CoveyTownListener from '../types/CoveyTownListener';\r\nimport CoveyTownsStore from '../lib/CoveyTownsStore';\r\nimport { ConversationAreaCreateRequest, ServerConversationArea } from '../client/TownsServiceClient';\r\n\r\n/**\r\n * The format of a request to join a Town in Covey.Town, as dispatched by the server middleware\r\n */\r\nexport interface TownJoinRequest {\r\n  /** userName of the player that would like to join * */\r\n  userName: string;\r\n  /** ID of the town that the player would like to join * */\r\n  coveyTownID: string;\r\n}\r\n\r\n/**\r\n * The format of a response to join a Town in Covey.Town, as returned by the handler to the server\r\n * middleware\r\n */\r\nexport interface TownJoinResponse {\r\n  /** Unique ID that represents this player * */\r\n  coveyUserID: string;\r\n  /** Secret token that this player should use to authenticate\r\n   * in future requests to this service * */\r\n  coveySessionToken: string;\r\n  /** Secret token that this player should use to authenticate\r\n   * in future requests to the video service * */\r\n  providerVideoToken: string;\r\n  /** List of players currently in this town * */\r\n  currentPlayers: Player[];\r\n  /** Friendly name of this town * */\r\n  friendlyName: string;\r\n  /** Is this a private town? * */\r\n  isPubliclyListed: boolean;\r\n  /** Conversation areas currently active in this town */\r\n  conversationAreas: ServerConversationArea[];\r\n}\r\n\r\n/**\r\n * Payload sent by client to create a Town in Covey.Town\r\n */\r\nexport interface TownCreateRequest {\r\n  friendlyName: string;\r\n  isPubliclyListed: boolean;\r\n}\r\n\r\n/**\r\n * Response from the server for a Town create request\r\n */\r\nexport interface TownCreateResponse {\r\n  coveyTownID: string;\r\n  coveyTownPassword: string;\r\n}\r\n\r\n/**\r\n * Response from the server for a Town list request\r\n */\r\nexport interface TownListResponse {\r\n  towns: CoveyTownList;\r\n}\r\n\r\n/**\r\n * Payload sent by the client to delete a Town\r\n */\r\nexport interface TownDeleteRequest {\r\n  coveyTownID: string;\r\n  coveyTownPassword: string;\r\n}\r\n\r\n/**\r\n * Payload sent by the client to update a Town.\r\n * N.B., JavaScript is terrible, so:\r\n * if(!isPubliclyListed) -> evaluates to true if the value is false OR undefined, use ===\r\n */\r\nexport interface TownUpdateRequest {\r\n  coveyTownID: string;\r\n  coveyTownPassword: string;\r\n  friendlyName?: string;\r\n  isPubliclyListed?: boolean;\r\n}\r\n\r\n/**\r\n * Envelope that wraps any response from the server\r\n */\r\nexport interface ResponseEnvelope<T> {\r\n  isOK: boolean;\r\n  message?: string;\r\n  response?: T;\r\n}\r\n\r\n/**\r\n * A handler to process a player's request to join a town. The flow is:\r\n *  1. Client makes a TownJoinRequest, this handler is executed\r\n *  2. Client uses the sessionToken returned by this handler to make a subscription to the town,\r\n *  @see townSubscriptionHandler for the code that handles that request.\r\n *\r\n * @param requestData an object representing the player's request\r\n */\r\nexport async function townJoinHandler(requestData: TownJoinRequest): Promise<ResponseEnvelope<TownJoinResponse>> {\r\n  const townsStore = CoveyTownsStore.getInstance();\r\n\r\n  const coveyTownController = townsStore.getControllerForTown(requestData.coveyTownID);\r\n  if (!coveyTownController) {\r\n    return {\r\n      isOK: false,\r\n      message: 'Error: No such town',\r\n    };\r\n  }\r\n  const newPlayer = new Player(requestData.userName);\r\n  const newSession = await coveyTownController.addPlayer(newPlayer);\r\n  assert(newSession.videoToken);\r\n  return {\r\n    isOK: true,\r\n    response: {\r\n      coveyUserID: newPlayer.id,\r\n      coveySessionToken: newSession.sessionToken,\r\n      providerVideoToken: newSession.videoToken,\r\n      currentPlayers: coveyTownController.players,\r\n      friendlyName: coveyTownController.friendlyName,\r\n      isPubliclyListed: coveyTownController.isPubliclyListed,\r\n      conversationAreas: coveyTownController.conversationAreas,\r\n    },\r\n  };\r\n}\r\n\r\nexport function townListHandler(): ResponseEnvelope<TownListResponse> {\r\n  const townsStore = CoveyTownsStore.getInstance();\r\n  return {\r\n    isOK: true,\r\n    response: { towns: townsStore.getTowns() },\r\n  };\r\n}\r\n\r\nexport function townCreateHandler(requestData: TownCreateRequest): ResponseEnvelope<TownCreateResponse> {\r\n  const townsStore = CoveyTownsStore.getInstance();\r\n  if (requestData.friendlyName.length === 0) {\r\n    return {\r\n      isOK: false,\r\n      message: 'FriendlyName must be specified',\r\n    };\r\n  }\r\n  const newTown = townsStore.createTown(requestData.friendlyName, requestData.isPubliclyListed);\r\n  return {\r\n    isOK: true,\r\n    response: {\r\n      coveyTownID: newTown.coveyTownID,\r\n      coveyTownPassword: newTown.townUpdatePassword,\r\n    },\r\n  };\r\n}\r\n\r\nexport function townDeleteHandler(requestData: TownDeleteRequest): ResponseEnvelope<Record<string, null>> {\r\n  const townsStore = CoveyTownsStore.getInstance();\r\n  const success = townsStore.deleteTown(requestData.coveyTownID, requestData.coveyTownPassword);\r\n  return {\r\n    isOK: success,\r\n    response: {},\r\n    message: !success ? 'Invalid password. Please double check your town update password.' : undefined,\r\n  };\r\n}\r\n\r\nexport function townUpdateHandler(requestData: TownUpdateRequest): ResponseEnvelope<Record<string, null>> {\r\n  const townsStore = CoveyTownsStore.getInstance();\r\n  const success = townsStore.updateTown(requestData.coveyTownID, requestData.coveyTownPassword, requestData.friendlyName, requestData.isPubliclyListed);\r\n  return {\r\n    isOK: success,\r\n    response: {},\r\n    message: !success ? 'Invalid password or update values specified. Please double check your town update password.' : undefined,\r\n  };\r\n\r\n}\r\n\r\n/**\r\n * A handler to process the \"Create Conversation Area\" request\r\n * The intended flow of this handler is:\r\n * * Fetch the town controller for the specified town ID\r\n * * Validate that the sessionToken is valid for that town\r\n * * Ask the TownController to create the conversation area\r\n * @param _requestData Conversation area create request\r\n */\r\nexport function conversationAreaCreateHandler(_requestData: ConversationAreaCreateRequest) : ResponseEnvelope<Record<string, null>> {\r\n  const townsStore = CoveyTownsStore.getInstance();\r\n  const townController = townsStore.getControllerForTown(_requestData.coveyTownID);\r\n  if (!townController?.getSessionByToken(_requestData.sessionToken)){\r\n    return {\r\n      isOK: false, response: {}, message: `Unable to create conversation area ${_requestData.conversationArea.label} with topic ${_requestData.conversationArea.topic}`,\r\n    };\r\n  }\r\n  const success = townController.addConversationArea(_requestData.conversationArea);\r\n\r\n  return {\r\n    isOK: success,\r\n    response: {},\r\n    message: !success ? `Unable to create conversation area ${_requestData.conversationArea.label} with topic ${_requestData.conversationArea.topic}` : undefined,\r\n  };\r\n}\r\n\r\n/**\r\n * An adapter between CoveyTownController's event interface (CoveyTownListener)\r\n * and the low-level network communication protocol\r\n *\r\n * @param socket the Socket object that we will use to communicate with the player\r\n */\r\nfunction townSocketAdapter(socket: Socket): CoveyTownListener {\r\n  return {\r\n    onPlayerMoved(movedPlayer: Player) {\r\n      socket.emit('playerMoved', movedPlayer);\r\n    },\r\n    onPlayerDisconnected(removedPlayer: Player) {\r\n      socket.emit('playerDisconnect', removedPlayer);\r\n    },\r\n    onPlayerJoined(newPlayer: Player) {\r\n      socket.emit('newPlayer', newPlayer);\r\n    },\r\n    onTownDestroyed() {\r\n      socket.emit('townClosing');\r\n      socket.disconnect(true);\r\n    },\r\n    onConversationAreaDestroyed(conversation: ServerConversationArea){\r\n      socket.emit('conversationDestroyed', conversation);\r\n    },\r\n    onConversationAreaUpdated(conversation: ServerConversationArea){\r\n      socket.emit('conversationUpdated', conversation);\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * A handler to process a remote player's subscription to updates for a town\r\n *\r\n * @param socket the Socket object that we will use to communicate with the player\r\n */\r\nexport function townSubscriptionHandler(socket: Socket): void {\r\n  // Parse the client's session token from the connection\r\n  // For each player, the session token should be the same string returned by joinTownHandler\r\n  const { token, coveyTownID } = socket.handshake.auth as { token: string; coveyTownID: string };\r\n\r\n  const townController = CoveyTownsStore.getInstance()\r\n    .getControllerForTown(coveyTownID);\r\n\r\n  // Retrieve our metadata about this player from the TownController\r\n  const s = townController?.getSessionByToken(token);\r\n  if (!s || !townController) {\r\n    // No valid session exists for this token, hence this client's connection should be terminated\r\n    socket.disconnect(true);\r\n    return;\r\n  }\r\n\r\n  // Create an adapter that will translate events from the CoveyTownController into\r\n  // events that the socket protocol knows about\r\n  const listener = townSocketAdapter(socket);\r\n  townController.addTownListener(listener);\r\n\r\n  // Register an event listener for the client socket: if the client disconnects,\r\n  // clean up our listener adapter, and then let the CoveyTownController know that the\r\n  // player's session is disconnected\r\n  socket.on('disconnect', () => {\r\n    townController.removeTownListener(listener);\r\n    townController.destroySession(s);\r\n  });\r\n\r\n  // Register an event listener for the client socket: if the client updates their\r\n  // location, inform the CoveyTownController\r\n  socket.on('playerMovement', (movementData: UserLocation) => {\r\n    townController.updatePlayerLocation(s.player, movementData);\r\n  });\r\n}\r\n"},"C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\src\\types\\Player.ts":{"language":"typescript","mutants":[{"id":"106","mutatorName":"BlockStatement","replacement":"{}","statusReason":"src/types/Player.ts(56,52): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\r\n","status":"CompileError","estimatedNetTime":762,"hitCount":2,"static":false,"coveredBy":["24","27"],"location":{"end":{"column":4,"line":63},"start":{"column":60,"line":56}}},{"id":"107","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 2\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:395:52\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":762,"hitCount":2,"static":false,"testsCompleted":2,"killedBy":["24"],"coveredBy":["24","27"],"location":{"end":{"column":89,"line":61},"start":{"column":7,"line":58}}},{"id":"119","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":88,"line":59},"start":{"column":7,"line":59}}},{"id":"110","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 2\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:395:52\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":762,"hitCount":2,"static":false,"testsCompleted":2,"killedBy":["24"],"coveredBy":["24","27"],"location":{"end":{"column":89,"line":60},"start":{"column":7,"line":58}}},{"id":"111","mutatorName":"LogicalOperator","replacement":"this.location.x > conversation.boundingBox.x - conversation.boundingBox.width / 2 && this.location.x < conversation.boundingBox.x + conversation.boundingBox.width / 2 || this.location.y > conversation.boundingBox.y - conversation.boundingBox.height / 2","status":"Survived","estimatedNetTime":762,"hitCount":2,"static":false,"testsCompleted":2,"coveredBy":["24","27"],"location":{"end":{"column":89,"line":60},"start":{"column":7,"line":58}}},{"id":"108","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","estimatedNetTime":762,"hitCount":2,"static":false,"testsCompleted":2,"coveredBy":["24","27"],"location":{"end":{"column":89,"line":61},"start":{"column":7,"line":58}}},{"id":"112","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","estimatedNetTime":762,"hitCount":2,"static":false,"testsCompleted":2,"coveredBy":["24","27"],"location":{"end":{"column":88,"line":59},"start":{"column":7,"line":58}}},{"id":"113","mutatorName":"LogicalOperator","replacement":"this.location.x > conversation.boundingBox.x - conversation.boundingBox.width / 2 || this.location.x < conversation.boundingBox.x + conversation.boundingBox.width / 2","status":"Survived","estimatedNetTime":762,"hitCount":2,"static":false,"testsCompleted":2,"coveredBy":["24","27"],"location":{"end":{"column":88,"line":59},"start":{"column":7,"line":58}}},{"id":"122","mutatorName":"ArithmeticOperator","replacement":"conversation.boundingBox.x - conversation.boundingBox.width / 2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":88,"line":59},"start":{"column":25,"line":59}}},{"id":"121","mutatorName":"EqualityOperator","replacement":"this.location.x >= conversation.boundingBox.x + conversation.boundingBox.width / 2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":88,"line":59},"start":{"column":7,"line":59}}},{"id":"115","mutatorName":"EqualityOperator","replacement":"this.location.x >= conversation.boundingBox.x - conversation.boundingBox.width / 2","status":"Survived","estimatedNetTime":762,"hitCount":2,"static":false,"testsCompleted":2,"coveredBy":["24","27"],"location":{"end":{"column":88,"line":58},"start":{"column":7,"line":58}}},{"id":"120","mutatorName":"EqualityOperator","replacement":"this.location.x <= conversation.boundingBox.x + conversation.boundingBox.width / 2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":88,"line":59},"start":{"column":7,"line":59}}},{"id":"117","mutatorName":"ArithmeticOperator","replacement":"conversation.boundingBox.x + conversation.boundingBox.width / 2","status":"Survived","estimatedNetTime":762,"hitCount":2,"static":false,"testsCompleted":2,"coveredBy":["24","27"],"location":{"end":{"column":88,"line":58},"start":{"column":25,"line":58}}},{"id":"109","mutatorName":"LogicalOperator","replacement":"this.location.x > conversation.boundingBox.x - conversation.boundingBox.width / 2 && this.location.x < conversation.boundingBox.x + conversation.boundingBox.width / 2 && this.location.y > conversation.boundingBox.y - conversation.boundingBox.height / 2 || this.location.y < conversation.boundingBox.y + conversation.boundingBox.height / 2","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 1\nReceived: 2\n    at C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:395:52\n    at step (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:52:23)\n    at Object.next (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:33:53)\n    at fulfilled (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\lib\\CoveyTownController.test.ts:24:58)","status":"Killed","estimatedNetTime":762,"hitCount":2,"static":false,"testsCompleted":2,"killedBy":["24"],"coveredBy":["24","27"],"location":{"end":{"column":89,"line":61},"start":{"column":7,"line":58}}},{"id":"116","mutatorName":"EqualityOperator","replacement":"this.location.x <= conversation.boundingBox.x - conversation.boundingBox.width / 2","status":"Survived","estimatedNetTime":762,"hitCount":2,"static":false,"testsCompleted":2,"coveredBy":["24","27"],"location":{"end":{"column":88,"line":58},"start":{"column":7,"line":58}}},{"id":"123","mutatorName":"ArithmeticOperator","replacement":"conversation.boundingBox.width * 2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":88,"line":59},"start":{"column":54,"line":59}}},{"id":"124","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":89,"line":60},"start":{"column":7,"line":60}}},{"id":"126","mutatorName":"EqualityOperator","replacement":"this.location.y <= conversation.boundingBox.y - conversation.boundingBox.height / 2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":89,"line":60},"start":{"column":7,"line":60}}},{"id":"125","mutatorName":"EqualityOperator","replacement":"this.location.y >= conversation.boundingBox.y - conversation.boundingBox.height / 2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":89,"line":60},"start":{"column":7,"line":60}}},{"id":"114","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","estimatedNetTime":762,"hitCount":2,"static":false,"testsCompleted":2,"coveredBy":["24","27"],"location":{"end":{"column":88,"line":58},"start":{"column":7,"line":58}}},{"id":"130","mutatorName":"EqualityOperator","replacement":"this.location.y <= conversation.boundingBox.y + conversation.boundingBox.height / 2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":89,"line":61},"start":{"column":7,"line":61}}},{"id":"131","mutatorName":"EqualityOperator","replacement":"this.location.y >= conversation.boundingBox.y + conversation.boundingBox.height / 2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":89,"line":61},"start":{"column":7,"line":61}}},{"id":"127","mutatorName":"ArithmeticOperator","replacement":"conversation.boundingBox.y + conversation.boundingBox.height / 2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":89,"line":60},"start":{"column":25,"line":60}}},{"id":"128","mutatorName":"ArithmeticOperator","replacement":"conversation.boundingBox.height * 2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":89,"line":60},"start":{"column":54,"line":60}}},{"id":"129","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":89,"line":61},"start":{"column":7,"line":61}}},{"id":"118","mutatorName":"ArithmeticOperator","replacement":"conversation.boundingBox.width * 2","status":"Survived","estimatedNetTime":762,"hitCount":2,"static":false,"testsCompleted":2,"coveredBy":["24","27"],"location":{"end":{"column":88,"line":58},"start":{"column":54,"line":58}}},{"id":"133","mutatorName":"ArithmeticOperator","replacement":"conversation.boundingBox.height * 2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":89,"line":61},"start":{"column":54,"line":61}}},{"id":"132","mutatorName":"ArithmeticOperator","replacement":"conversation.boundingBox.y - conversation.boundingBox.height / 2","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":89,"line":61},"start":{"column":25,"line":61}}}],"source":"import { nanoid } from 'nanoid';\r\nimport { ServerConversationArea } from '../client/TownsServiceClient';\r\nimport { UserLocation } from '../CoveyTypes';\r\n\r\n/**\r\n * Each user who is connected to a town is represented by a Player object\r\n */\r\nexport default class Player {\r\n  /** The current location of this user in the world map * */\r\n  public location: UserLocation;\r\n\r\n  /** The unique identifier for this player * */\r\n  private readonly _id: string;\r\n\r\n  /** The player's username, which is not guaranteed to be unique within the town * */\r\n  private readonly _userName: string;\r\n\r\n  /** The current ConversationArea that the player is in, or undefined if they are not located within one */\r\n  private _activeConversationArea?: ServerConversationArea;\r\n\r\n  constructor(userName: string) {\r\n    this.location = {\r\n      x: 0,\r\n      y: 0,\r\n      moving: false,\r\n      rotation: 'front',\r\n    };\r\n    this._userName = userName;\r\n    this._id = nanoid();\r\n  }\r\n\r\n  get userName(): string {\r\n    return this._userName;\r\n  }\r\n\r\n  get id(): string {\r\n    return this._id;\r\n  }\r\n\r\n  get activeConversationArea(): ServerConversationArea | undefined {\r\n    return this._activeConversationArea;\r\n  }\r\n\r\n  set activeConversationArea(conversationArea: ServerConversationArea | undefined) {\r\n    this._activeConversationArea = conversationArea;\r\n  }\r\n\r\n  /**\r\n   * Checks to see if a player's location is within the specified conversation area\r\n   * \r\n   * This method is resilient to floating point errors that could arise if any of the coordinates of\r\n   * `this.location` are dramatically smaller than those of the conversation area's bounding box.\r\n   * @param conversation \r\n   * @returns \r\n   */\r\n  isWithin(conversation: ServerConversationArea) : boolean {\r\n    return (\r\n      this.location.x > conversation.boundingBox.x - conversation.boundingBox.width / 2 &&\r\n      this.location.x < conversation.boundingBox.x + conversation.boundingBox.width / 2 &&\r\n      this.location.y > conversation.boundingBox.y - conversation.boundingBox.height / 2 &&\r\n      this.location.y < conversation.boundingBox.y + conversation.boundingBox.height / 2\r\n    );\r\n  }\r\n\r\n}\r\n"},"C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\src\\router\\towns.ts":{"language":"typescript","mutants":[{"id":"102","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"src/router/towns.ts(113,58): error TS2345: Argument of type '{}' is not assignable to parameter of type 'ConversationAreaCreateRequest'.\r\n  Type '{}' is missing the following properties from type 'ConversationAreaCreateRequest': coveyTownID, sessionToken, conversationArea\r\n","status":"CompileError","estimatedNetTime":756,"hitCount":1,"static":false,"coveredBy":["27"],"location":{"end":{"column":8,"line":117},"start":{"column":58,"line":113}}},{"id":"105","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":86,"line":124},"start":{"column":20,"line":124}}},{"id":"104","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":10,"line":125},"start":{"column":15,"line":123}}},{"id":"103","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","estimatedNetTime":0,"static":false,"coveredBy":[],"location":{"end":{"column":6,"line":126},"start":{"column":19,"line":120}}},{"id":"101","mutatorName":"BlockStatement","replacement":"{}","statusReason":": Timeout - Async callback was not invoked within the 5000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 5000 ms timeout specified by jest.setTimeout.Error: \n    at new Spec (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\jasmine\\Spec.js:116:22)\n    at new Spec (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\setup_jest_globals.js:78:9)\n    at specFactory (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\jasmine\\Env.js:523:24)\n    at Env.it (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\jasmine\\Env.js:592:24)\n    at Env.it (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:134:23)\n    at it (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\jasmine\\jasmineLight.js:100:21)\n    at Suite.<anonymous> (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\strykerTmpDir\\sandbox1826510\\src\\client\\CoveyTownConversationAPI.test.ts:60:3)\n    at addSpecsToSuite (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\jasmine\\Env.js:444:51)\n    at Env.describe (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\jasmine\\Env.js:414:11)\n    at describe (C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\jest-jasmine2\\build\\jasmine\\jasmineLight.js:88:18)","status":"Killed","estimatedNetTime":756,"hitCount":1,"static":false,"testsCompleted":1,"killedBy":["27"],"coveredBy":["27"],"location":{"end":{"column":6,"line":120},"start":{"column":9,"line":112}}}],"source":"import express, { Express } from 'express';\r\nimport io from 'socket.io';\r\nimport { Server } from 'http';\r\nimport { StatusCodes } from 'http-status-codes';\r\nimport {\r\n  conversationAreaCreateHandler,\r\n  townCreateHandler, townDeleteHandler,\r\n  townJoinHandler,\r\n  townListHandler,\r\n  townSubscriptionHandler,\r\n  townUpdateHandler,\r\n} from '../requestHandlers/CoveyTownRequestHandlers';\r\nimport { logError } from '../Utils';\r\n\r\nexport default function addTownRoutes(http: Server, app: Express): io.Server {\r\n  /*\r\n   * Create a new session (aka join a town)\r\n   */\r\n  app.post('/sessions', express.json(), async (req, res) => {\r\n    try {\r\n      const result = await townJoinHandler({\r\n        userName: req.body.userName,\r\n        coveyTownID: req.body.coveyTownID,\r\n      });\r\n      res.status(StatusCodes.OK)\r\n        .json(result);\r\n    } catch (err) {\r\n      logError(err);\r\n      res.status(StatusCodes.INTERNAL_SERVER_ERROR)\r\n        .json({\r\n          message: 'Internal server error, please see log in server for more details',\r\n        });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Delete a town\r\n   */\r\n  app.delete('/towns/:townID/:townPassword', express.json(), async (req, res) => {\r\n    try {\r\n      const result = townDeleteHandler({\r\n        coveyTownID: req.params.townID,\r\n        coveyTownPassword: req.params.townPassword,\r\n      });\r\n      res.status(200)\r\n        .json(result);\r\n    } catch (err) {\r\n      logError(err);\r\n      res.status(500)\r\n        .json({\r\n          message: 'Internal server error, please see log in server for details',\r\n        });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * List all towns\r\n   */\r\n  app.get('/towns', express.json(), async (_req, res) => {\r\n    try {\r\n      const result = townListHandler();\r\n      res.status(StatusCodes.OK)\r\n        .json(result);\r\n    } catch (err) {\r\n      logError(err);\r\n      res.status(StatusCodes.INTERNAL_SERVER_ERROR)\r\n        .json({\r\n          message: 'Internal server error, please see log in server for more details',\r\n        });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Create a town\r\n   */\r\n  app.post('/towns', express.json(), async (req, res) => {\r\n    try {\r\n      const result = townCreateHandler(req.body);\r\n      res.status(StatusCodes.OK)\r\n        .json(result);\r\n    } catch (err) {\r\n      logError(err);\r\n      res.status(StatusCodes.INTERNAL_SERVER_ERROR)\r\n        .json({\r\n          message: 'Internal server error, please see log in server for more details',\r\n        });\r\n    }\r\n  });\r\n  /**\r\n   * Update a town\r\n   */\r\n  app.patch('/towns/:townID', express.json(), async (req, res) => {\r\n    try {\r\n      const result = townUpdateHandler({\r\n        coveyTownID: req.params.townID,\r\n        isPubliclyListed: req.body.isPubliclyListed,\r\n        friendlyName: req.body.friendlyName,\r\n        coveyTownPassword: req.body.coveyTownPassword,\r\n      });\r\n      res.status(StatusCodes.OK)\r\n        .json(result);\r\n    } catch (err) {\r\n      logError(err);\r\n      res.status(StatusCodes.INTERNAL_SERVER_ERROR)\r\n        .json({\r\n          message: 'Internal server error, please see log in server for more details',\r\n        });\r\n    }\r\n  });\r\n\r\n  app.post('/towns/:townID/conversationAreas', express.json(), async (req, res) => {\r\n    try {\r\n      const result = await conversationAreaCreateHandler({\r\n        coveyTownID: req.params.townID,\r\n        sessionToken: req.body.sessionToken,\r\n        conversationArea: req.body.conversationArea,\r\n      });\r\n      res.status(StatusCodes.OK)\r\n        .json(result);\r\n    } catch (err) {\r\n      logError(err);\r\n      res.status(StatusCodes.INTERNAL_SERVER_ERROR)\r\n        .json({\r\n          message: 'Internal server error, please see log in server for more details',\r\n        });\r\n    }\r\n  });\r\n\r\n  const socketServer = new io.Server(http, { cors: { origin: '*' } });\r\n  socketServer.on('connection', townSubscriptionHandler);\r\n  return socketServer;\r\n}\r\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\src\\lib\\CoveyTownController.test.ts":{"tests":[{"id":"0","name":"CoveyTownController constructor should set the friendlyName property","location":{"start":{"column":3,"line":35}}},{"id":"1","name":"CoveyTownController addPlayer should use the coveyTownID and player ID properties when requesting a video token","location":{"start":{"column":5,"line":42}}},{"id":"2","name":"CoveyTownController town listeners and events should notify added listeners of player movement when updatePlayerLocation is called","location":{"start":{"column":5,"line":61}}},{"id":"3","name":"CoveyTownController town listeners and events should notify added listeners of player disconnections when destroySession is called","location":{"start":{"column":5,"line":69}}},{"id":"4","name":"CoveyTownController town listeners and events should notify added listeners of new players when addPlayer is called","location":{"start":{"column":5,"line":77}}},{"id":"5","name":"CoveyTownController town listeners and events should notify added listeners that the town is destroyed when disconnectAllPlayers is called","location":{"start":{"column":5,"line":85}}},{"id":"6","name":"CoveyTownController town listeners and events should not notify removed listeners of player movement when updatePlayerLocation is called","location":{"start":{"column":5,"line":94}}},{"id":"7","name":"CoveyTownController town listeners and events should not notify removed listeners of player disconnections when destroySession is called","location":{"start":{"column":5,"line":105}}},{"id":"8","name":"CoveyTownController town listeners and events should not notify removed listeners of new players when addPlayer is called","location":{"start":{"column":5,"line":116}}},{"id":"9","name":"CoveyTownController town listeners and events should not notify removed listeners that the town is destroyed when disconnectAllPlayers is called","location":{"start":{"column":5,"line":127}}},{"id":"10","name":"CoveyTownController townSubscriptionHandler should reject connections with invalid town IDs by calling disconnect","location":{"start":{"column":5,"line":151}}},{"id":"11","name":"CoveyTownController townSubscriptionHandler should reject connections with invalid session tokens by calling disconnect","location":{"start":{"column":5,"line":156}}},{"id":"12","name":"CoveyTownController townSubscriptionHandler with a valid session token should add a town listener, which should emit \"newPlayer\" to the socket when a player joins","location":{"start":{"column":7,"line":162}}},{"id":"13","name":"CoveyTownController townSubscriptionHandler with a valid session token should add a town listener, which should emit \"playerMoved\" to the socket when a player moves","location":{"start":{"column":7,"line":168}}},{"id":"14","name":"CoveyTownController townSubscriptionHandler with a valid session token should add a town listener, which should emit \"playerDisconnect\" to the socket when a player disconnects","location":{"start":{"column":7,"line":175}}},{"id":"15","name":"CoveyTownController townSubscriptionHandler with a valid session token should add a town listener, which should emit \"townClosing\" to the socket and disconnect it when disconnectAllPlayers is called","location":{"start":{"column":7,"line":181}}},{"id":"16","name":"CoveyTownController townSubscriptionHandler with a valid session token when a socket disconnect event is fired should remove the town listener for that socket, and stop sending events to it","location":{"start":{"column":9,"line":189}}},{"id":"17","name":"CoveyTownController townSubscriptionHandler with a valid session token when a socket disconnect event is fired should destroy the session corresponding to that socket","location":{"start":{"column":9,"line":204}}},{"id":"18","name":"CoveyTownController townSubscriptionHandler with a valid session token should forward playerMovement events from the socket to subscribed listeners","location":{"start":{"column":7,"line":222}}},{"id":"19","name":"CoveyTownController addConversationArea should add the conversation area to the list of conversation areas","location":{"start":{"column":5,"line":246}}},{"id":"20","name":"CoveyTownController updatePlayerLocation should respect the conversation area reported by the player userLocation.conversationLabel, and not override it based on the player's x,y location","location":{"start":{"column":5,"line":263}}},{"id":"21","name":"CoveyTownController updatePlayerLocation should emit an onConversationUpdated event when a conversation area gets a new occupant","location":{"start":{"column":5,"line":290}}},{"id":"22","name":"CoveyTownController updatePlayerLocation should emit an onPlayerMoved event when a conversation area gets a new occupant","location":{"start":{"column":5,"line":306}}},{"id":"23","name":"CoveyTownController updatePlayerLocation it should ensure that the onPlayerMoved method has been emited when the players location has been updated","location":{"start":{"column":5,"line":323}}},{"id":"24","name":"CoveyTownController updatePlayerLocation it should ensure that the conversationArea list reflects player transitions from conversationAreas","location":{"start":{"column":5,"line":346}}},{"id":"25","name":"CoveyTownController updatePlayerLocation checks to see if the player has been removed","location":{"start":{"column":5,"line":403}}},{"id":"26","name":"CoveyTownController destroySession should remove from the conversation area when player session is destroyed","location":{"start":{"column":5,"line":465}}}],"source":"import { nanoid } from 'nanoid';\r\nimport { mock, mockDeep, mockReset } from 'jest-mock-extended';\r\nimport { Socket } from 'socket.io';\r\nimport TwilioVideo from './TwilioVideo';\r\nimport Player from '../types/Player';\r\nimport CoveyTownController from './CoveyTownController';\r\nimport CoveyTownListener from '../types/CoveyTownListener';\r\nimport { UserLocation } from '../CoveyTypes';\r\nimport PlayerSession from '../types/PlayerSession';\r\nimport { townSubscriptionHandler } from '../requestHandlers/CoveyTownRequestHandlers';\r\nimport CoveyTownsStore from './CoveyTownsStore';\r\nimport * as TestUtils from '../client/TestUtils';\r\nimport { EXPECTATION_FAILED } from 'http-status-codes';\r\n\r\n\r\n\r\n\r\n\r\nconst mockTwilioVideo = mockDeep<TwilioVideo>();\r\njest.spyOn(TwilioVideo, 'getInstance').mockReturnValue(mockTwilioVideo);\r\n\r\nfunction generateTestLocation(): UserLocation {\r\n  return {\r\n    rotation: 'back',\r\n    moving: Math.random() < 0.5,\r\n    x: Math.floor(Math.random() * 100),\r\n    y: Math.floor(Math.random() * 100),\r\n  };\r\n}\r\n\r\ndescribe('CoveyTownController', () => {\r\n  beforeEach(() => {\r\n    mockTwilioVideo.getTokenForTown.mockClear();\r\n  });\r\n  it('constructor should set the friendlyName property', () => { \r\n    const townName = `FriendlyNameTest-${nanoid()}`;\r\n    const townController = new CoveyTownController(townName, false);\r\n    expect(townController.friendlyName)\r\n      .toBe(townName);\r\n  });\r\n  describe('addPlayer', () => { \r\n    it('should use the coveyTownID and player ID properties when requesting a video token',\r\n      async () => {\r\n        const townName = `FriendlyNameTest-${nanoid()}`;\r\n        const townController = new CoveyTownController(townName, false);\r\n        const newPlayerSession = await townController.addPlayer(new Player(nanoid()));\r\n        expect(mockTwilioVideo.getTokenForTown).toBeCalledTimes(1);\r\n        expect(mockTwilioVideo.getTokenForTown).toBeCalledWith(townController.coveyTownID, newPlayerSession.player.id);\r\n      });\r\n  });\r\n  describe('town listeners and events', () => {\r\n    let testingTown: CoveyTownController;\r\n    const mockListeners = [mock<CoveyTownListener>(),\r\n      mock<CoveyTownListener>(),\r\n      mock<CoveyTownListener>()];\r\n    beforeEach(() => {\r\n      const townName = `town listeners and events tests ${nanoid()}`;\r\n      testingTown = new CoveyTownController(townName, false);\r\n      mockListeners.forEach(mockReset);\r\n    });\r\n    it('should notify added listeners of player movement when updatePlayerLocation is called', async () => {\r\n      const player = new Player('test player');\r\n      await testingTown.addPlayer(player);\r\n      const newLocation = generateTestLocation();\r\n      mockListeners.forEach(listener => testingTown.addTownListener(listener));\r\n      testingTown.updatePlayerLocation(player, newLocation);\r\n      mockListeners.forEach(listener => expect(listener.onPlayerMoved).toBeCalledWith(player));\r\n    });\r\n    it('should notify added listeners of player disconnections when destroySession is called', async () => {\r\n      const player = new Player('test player');\r\n      const session = await testingTown.addPlayer(player);\r\n\r\n      mockListeners.forEach(listener => testingTown.addTownListener(listener));\r\n      testingTown.destroySession(session);\r\n      mockListeners.forEach(listener => expect(listener.onPlayerDisconnected).toBeCalledWith(player));\r\n    });\r\n    it('should notify added listeners of new players when addPlayer is called', async () => {\r\n      mockListeners.forEach(listener => testingTown.addTownListener(listener));\r\n\r\n      const player = new Player('test player');\r\n      await testingTown.addPlayer(player);\r\n      mockListeners.forEach(listener => expect(listener.onPlayerJoined).toBeCalledWith(player));\r\n\r\n    });\r\n    it('should notify added listeners that the town is destroyed when disconnectAllPlayers is called', async () => {\r\n      const player = new Player('test player');\r\n      await testingTown.addPlayer(player);\r\n\r\n      mockListeners.forEach(listener => testingTown.addTownListener(listener));\r\n      testingTown.disconnectAllPlayers();\r\n      mockListeners.forEach(listener => expect(listener.onTownDestroyed).toBeCalled());\r\n\r\n    });\r\n    it('should not notify removed listeners of player movement when updatePlayerLocation is called', async () => {\r\n      const player = new Player('test player');\r\n      await testingTown.addPlayer(player);\r\n\r\n      mockListeners.forEach(listener => testingTown.addTownListener(listener));\r\n      const newLocation = generateTestLocation();\r\n      const listenerRemoved = mockListeners[1];\r\n      testingTown.removeTownListener(listenerRemoved);\r\n      testingTown.updatePlayerLocation(player, newLocation);\r\n      expect(listenerRemoved.onPlayerMoved).not.toBeCalled();\r\n    });\r\n    it('should not notify removed listeners of player disconnections when destroySession is called', async () => {\r\n      const player = new Player('test player');\r\n      const session = await testingTown.addPlayer(player);\r\n\r\n      mockListeners.forEach(listener => testingTown.addTownListener(listener));\r\n      const listenerRemoved = mockListeners[1];\r\n      testingTown.removeTownListener(listenerRemoved);\r\n      testingTown.destroySession(session);\r\n      expect(listenerRemoved.onPlayerDisconnected).not.toBeCalled();\r\n\r\n    });\r\n    it('should not notify removed listeners of new players when addPlayer is called', async () => {\r\n      const player = new Player('test player');\r\n\r\n      mockListeners.forEach(listener => testingTown.addTownListener(listener));\r\n      const listenerRemoved = mockListeners[1];\r\n      testingTown.removeTownListener(listenerRemoved);\r\n      const session = await testingTown.addPlayer(player);\r\n      testingTown.destroySession(session);\r\n      expect(listenerRemoved.onPlayerJoined).not.toBeCalled();\r\n    });\r\n\r\n    it('should not notify removed listeners that the town is destroyed when disconnectAllPlayers is called', async () => {\r\n      const player = new Player('test player');\r\n      await testingTown.addPlayer(player);\r\n\r\n      mockListeners.forEach(listener => testingTown.addTownListener(listener));\r\n      const listenerRemoved = mockListeners[1];\r\n      testingTown.removeTownListener(listenerRemoved);\r\n      testingTown.disconnectAllPlayers();\r\n      expect(listenerRemoved.onTownDestroyed).not.toBeCalled();\r\n\r\n    });\r\n  });\r\n  describe('townSubscriptionHandler', () => {\r\n    const mockSocket = mock<Socket>();\r\n    let testingTown: CoveyTownController;\r\n    let player: Player;\r\n    let session: PlayerSession;\r\n    beforeEach(async () => {\r\n      const townName = `connectPlayerSocket tests ${nanoid()}`;\r\n      testingTown = CoveyTownsStore.getInstance().createTown(townName, false);\r\n      mockReset(mockSocket);\r\n      player = new Player('test player');\r\n      session = await testingTown.addPlayer(player);\r\n    });\r\n    it('should reject connections with invalid town IDs by calling disconnect', async () => {\r\n      TestUtils.setSessionTokenAndTownID(nanoid(), session.sessionToken, mockSocket);\r\n      townSubscriptionHandler(mockSocket);\r\n      expect(mockSocket.disconnect).toBeCalledWith(true);\r\n    });\r\n    it('should reject connections with invalid session tokens by calling disconnect', async () => {\r\n      TestUtils.setSessionTokenAndTownID(testingTown.coveyTownID, nanoid(), mockSocket);\r\n      townSubscriptionHandler(mockSocket);\r\n      expect(mockSocket.disconnect).toBeCalledWith(true);\r\n    });\r\n    describe('with a valid session token', () => {\r\n      it('should add a town listener, which should emit \"newPlayer\" to the socket when a player joins', async () => {\r\n        TestUtils.setSessionTokenAndTownID(testingTown.coveyTownID, session.sessionToken, mockSocket);\r\n        townSubscriptionHandler(mockSocket);\r\n        await testingTown.addPlayer(player);\r\n        expect(mockSocket.emit).toBeCalledWith('newPlayer', player);\r\n      });\r\n      it('should add a town listener, which should emit \"playerMoved\" to the socket when a player moves', async () => {\r\n        TestUtils.setSessionTokenAndTownID(testingTown.coveyTownID, session.sessionToken, mockSocket);\r\n        townSubscriptionHandler(mockSocket);\r\n        testingTown.updatePlayerLocation(player, generateTestLocation());\r\n        expect(mockSocket.emit).toBeCalledWith('playerMoved', player);\r\n\r\n      });\r\n      it('should add a town listener, which should emit \"playerDisconnect\" to the socket when a player disconnects', async () => {\r\n        TestUtils.setSessionTokenAndTownID(testingTown.coveyTownID, session.sessionToken, mockSocket);\r\n        townSubscriptionHandler(mockSocket);\r\n        testingTown.destroySession(session);\r\n        expect(mockSocket.emit).toBeCalledWith('playerDisconnect', player);\r\n      });\r\n      it('should add a town listener, which should emit \"townClosing\" to the socket and disconnect it when disconnectAllPlayers is called', async () => {\r\n        TestUtils.setSessionTokenAndTownID(testingTown.coveyTownID, session.sessionToken, mockSocket);\r\n        townSubscriptionHandler(mockSocket);\r\n        testingTown.disconnectAllPlayers();\r\n        expect(mockSocket.emit).toBeCalledWith('townClosing');\r\n        expect(mockSocket.disconnect).toBeCalledWith(true);\r\n      });\r\n      describe('when a socket disconnect event is fired', () => {\r\n        it('should remove the town listener for that socket, and stop sending events to it', async () => {\r\n          TestUtils.setSessionTokenAndTownID(testingTown.coveyTownID, session.sessionToken, mockSocket);\r\n          townSubscriptionHandler(mockSocket);\r\n\r\n          // find the 'disconnect' event handler for the socket, which should have been registered after the socket was connected\r\n          const disconnectHandler = mockSocket.on.mock.calls.find(call => call[0] === 'disconnect');\r\n          if (disconnectHandler && disconnectHandler[1]) {\r\n            disconnectHandler[1]();\r\n            const newPlayer = new Player('should not be notified');\r\n            await testingTown.addPlayer(newPlayer);\r\n            expect(mockSocket.emit).not.toHaveBeenCalledWith('newPlayer', newPlayer);\r\n          } else {\r\n            fail('No disconnect handler registered');\r\n          }\r\n        });\r\n        it('should destroy the session corresponding to that socket', async () => {\r\n          TestUtils.setSessionTokenAndTownID(testingTown.coveyTownID, session.sessionToken, mockSocket);\r\n          townSubscriptionHandler(mockSocket);\r\n\r\n          // find the 'disconnect' event handler for the socket, which should have been registered after the socket was connected\r\n          const disconnectHandler = mockSocket.on.mock.calls.find(call => call[0] === 'disconnect');\r\n          if (disconnectHandler && disconnectHandler[1]) {\r\n            disconnectHandler[1]();\r\n            mockReset(mockSocket);\r\n            TestUtils.setSessionTokenAndTownID(testingTown.coveyTownID, session.sessionToken, mockSocket);\r\n            townSubscriptionHandler(mockSocket);\r\n            expect(mockSocket.disconnect).toHaveBeenCalledWith(true);\r\n          } else {\r\n            fail('No disconnect handler registered');\r\n          }\r\n\r\n        });\r\n      });\r\n      it('should forward playerMovement events from the socket to subscribed listeners', async () => {\r\n        TestUtils.setSessionTokenAndTownID(testingTown.coveyTownID, session.sessionToken, mockSocket);\r\n        townSubscriptionHandler(mockSocket);\r\n        const mockListener = mock<CoveyTownListener>();\r\n        testingTown.addTownListener(mockListener);\r\n        // find the 'playerMovement' event handler for the socket, which should have been registered after the socket was connected\r\n        const playerMovementHandler = mockSocket.on.mock.calls.find(call => call[0] === 'playerMovement');\r\n        if (playerMovementHandler && playerMovementHandler[1]) {\r\n          const newLocation = generateTestLocation();\r\n          player.location = newLocation;\r\n          playerMovementHandler[1](newLocation);\r\n          expect(mockListener.onPlayerMoved).toHaveBeenCalledWith(player);\r\n        } else {\r\n          fail('No playerMovement handler registered');\r\n        }\r\n      });\r\n    });\r\n  });\r\n  describe('addConversationArea', () => {\r\n    let testingTown: CoveyTownController;\r\n    beforeEach(() => {\r\n      const townName = `addConversationArea test town ${nanoid()}`;\r\n      testingTown = new CoveyTownController(townName, false);\r\n    });\r\n    it('should add the conversation area to the list of conversation areas', ()=>{\r\n      const newConversationArea = TestUtils.createConversationForTesting();\r\n      const result = testingTown.addConversationArea(newConversationArea);\r\n      expect(result).toBe(true);\r\n      const areas = testingTown.conversationAreas;\r\n      expect(areas.length).toEqual(1);\r\n      expect(areas[0].label).toEqual(newConversationArea.label);\r\n      expect(areas[0].topic).toEqual(newConversationArea.topic);\r\n      expect(areas[0].boundingBox).toEqual(newConversationArea.boundingBox);\r\n    });\r\n  });\r\n  describe('updatePlayerLocation', () =>{\r\n    let testingTown: CoveyTownController;\r\n    beforeEach(() => {\r\n      const townName = `updatePlayerLocation test town ${nanoid()}`;\r\n      testingTown = new CoveyTownController(townName, false);\r\n    });\r\n    it('should respect the conversation area reported by the player userLocation.conversationLabel, and not override it based on the player\\'s x,y location', async ()=>{\r\n      const newConversationArea = TestUtils.createConversationForTesting({ boundingBox: { x: 10, y: 10, height: 5, width: 5 } });\r\n      const movedConversationArea = TestUtils.createConversationForTesting({ boundingBox: { x: 30, y: 30, height: 5, width: 5 } });\r\n      const resultNotMoved = testingTown.addConversationArea(newConversationArea);\r\n      const resultMoved = testingTown.addConversationArea(movedConversationArea);\r\n      expect(resultNotMoved).toBe(true);\r\n      expect(resultMoved).toBe(true);\r\n      const player = new Player(nanoid());\r\n      await testingTown.addPlayer(player);\r\n\r\n      const newLocation:UserLocation = { moving: false, rotation: 'front', x: 25, y: 25, conversationLabel: newConversationArea.label };\r\n      testingTown.updatePlayerLocation(player, newLocation);\r\n      expect(player.activeConversationArea?.label).toEqual(newConversationArea.label);\r\n      expect(player.activeConversationArea?.topic).toEqual(newConversationArea.topic);\r\n      expect(player.activeConversationArea?.boundingBox).toEqual(newConversationArea.boundingBox);\r\n\r\n      const newLocationMoved:UserLocation = { moving: true, rotation: 'front', x: 3, y: 3, conversationLabel: movedConversationArea.label };\r\n      testingTown.updatePlayerLocation(player, newLocationMoved);\r\n      expect(player.activeConversationArea?.label).toEqual(movedConversationArea.label);\r\n      expect(player.activeConversationArea?.topic).toEqual(movedConversationArea.topic);\r\n      expect(player.activeConversationArea?.boundingBox).toEqual(movedConversationArea.boundingBox);\r\n\r\n      const areas = testingTown.conversationAreas;\r\n      expect(areas[0].occupantsByID.length).toBe(1);\r\n      expect(areas[0].occupantsByID[0]).toBe(player.id);\r\n\r\n    }); \r\n    it('should emit an onConversationUpdated event when a conversation area gets a new occupant', async () =>{\r\n\r\n      const newConversationArea = TestUtils.createConversationForTesting({ boundingBox: { x: 10, y: 10, height: 5, width: 5 } });\r\n      const result = testingTown.addConversationArea(newConversationArea);\r\n      expect(result).toBe(true);\r\n\r\n      const mockListener = mock<CoveyTownListener>();\r\n      testingTown.addTownListener(mockListener);\r\n\r\n      const player = new Player(nanoid());\r\n      await testingTown.addPlayer(player);\r\n      const newLocation:UserLocation = { moving: false, rotation: 'front', x: 25, y: 25, conversationLabel: newConversationArea.label };\r\n      testingTown.updatePlayerLocation(player, newLocation);\r\n      expect(mockListener.onConversationAreaUpdated).toHaveBeenCalledTimes(1);\r\n\r\n    });\r\n    it('should emit an onPlayerMoved event when a conversation area gets a new occupant', async () =>{\r\n\r\n      const newConversationArea = TestUtils.createConversationForTesting({ boundingBox: { x: 10, y: 10, height: 5, width: 5 } });\r\n      const result = testingTown.addConversationArea(newConversationArea);\r\n      expect(result).toBe(true);\r\n\r\n      const mockListener = mock<CoveyTownListener>();\r\n      testingTown.addTownListener(mockListener);\r\n\r\n      const player = new Player(nanoid());\r\n      await testingTown.addPlayer(player);\r\n      const newLocation:UserLocation = { moving: false, rotation: 'front', x: 25, y: 25, conversationLabel: newConversationArea.label };\r\n      testingTown.updatePlayerLocation(player, newLocation);\r\n      expect(mockListener.onPlayerMoved).toHaveBeenCalledTimes(1);\r\n\r\n\r\n    });\r\n    it('it should ensure that the onPlayerMoved method has been emited when the players location has been updated', async () => {\r\n      const newConversationArea = TestUtils.createConversationForTesting({\r\n        boundingBox: { x: 10, y: 10, height: 5, width: 5 },\r\n      });\r\n      const result = testingTown.addConversationArea(newConversationArea);\r\n      expect(result).toBe(true);\r\n\r\n      const mockListener = mock<CoveyTownListener>();\r\n      testingTown.addTownListener(mockListener);\r\n\r\n      const player = new Player(nanoid());\r\n      await testingTown.addPlayer(player);\r\n\r\n      const newLocation: UserLocation = {\r\n        moving: false,\r\n        rotation: 'front',\r\n        x: 25,\r\n        y: 25,\r\n        conversationLabel: newConversationArea.label,\r\n      };\r\n      testingTown.updatePlayerLocation(player, newLocation);\r\n      expect(mockListener.onPlayerMoved).toHaveBeenCalledTimes(1);\r\n    });\r\n    it('it should ensure that the conversationArea list reflects player transitions from conversationAreas', async () => {\r\n      const oldConversationArea = TestUtils.createConversationForTesting({\r\n        boundingBox: { x: 10, y: 10, height: 5, width: 5 },\r\n      });\r\n      const newConversationArea = TestUtils.createConversationForTesting({\r\n        boundingBox: { x: 25, y: 25, height: 5, width: 5 },\r\n      });\r\n      const addOldConversationAreaResult = testingTown.addConversationArea(oldConversationArea);\r\n      expect(addOldConversationAreaResult).toBe(true);\r\n    \r\n      const mockListener = mock<CoveyTownListener>();\r\n      testingTown.addTownListener(mockListener);\r\n\r\n      const player = new Player(nanoid());\r\n      await testingTown.addPlayer(player);\r\n      \r\n      const newLocation: UserLocation = {\r\n        moving: false,\r\n        rotation: 'front',\r\n        x: 9,\r\n        y: 9,\r\n        conversationLabel: oldConversationArea.label,\r\n      };\r\n\r\n      const updateLocation: UserLocation = {\r\n        moving: false,\r\n        rotation: 'front',\r\n        x: 24,\r\n        y: 24,\r\n        conversationLabel: newConversationArea.label,\r\n      };\r\n\r\n      const updateLocationOutsideConversationArea: UserLocation = {\r\n        moving: true,\r\n        rotation: 'front',\r\n        x: 0,\r\n        y: 0,\r\n      };\r\n\r\n      testingTown.updatePlayerLocation(player, newLocation);\r\n      expect(player.activeConversationArea?.label).toEqual(oldConversationArea.label);\r\n      expect(testingTown.conversationAreas[0].occupantsByID[0]).toEqual(player.id);\r\n\r\n      const addNewConversationAreaResult = testingTown.addConversationArea(newConversationArea);\r\n      expect(addNewConversationAreaResult).toBe(true);\r\n\r\n      testingTown.updatePlayerLocation(player, updateLocation);\r\n      expect(player.activeConversationArea?.label).toEqual(newConversationArea.label);\r\n      expect(testingTown.conversationAreas.length).toBe(1);\r\n      expect(testingTown.conversationAreas[0].occupantsByID[0]).toEqual(player.id);\r\n      expect(mockListener.onConversationAreaDestroyed).toHaveBeenCalledTimes(1);\r\n\r\n      \r\n      testingTown.updatePlayerLocation(player, updateLocationOutsideConversationArea);\r\n      expect(player.activeConversationArea).toBeUndefined();\r\n      expect(testingTown.conversationAreas.length).toBe(0);\r\n    });\r\n    it('checks to see if the player has been removed', async() => {\r\n\r\n      const oldConversationArea = TestUtils.createConversationForTesting({\r\n        boundingBox: { x: 10, y: 10, height: 5, width: 5 },\r\n      });\r\n      const newConversationArea = TestUtils.createConversationForTesting({\r\n        boundingBox: { x: 25, y: 25, height: 5, width: 5 },\r\n      });\r\n\r\n      const OldConversationAreaResult = testingTown.addConversationArea(oldConversationArea);\r\n      expect(OldConversationAreaResult).toBe(true);\r\n      const newConversationAreaResult = testingTown.addConversationArea(newConversationArea);\r\n      expect(newConversationAreaResult).toBe(true);\r\n\r\n      const player1 = new Player(nanoid());\r\n      const player2 = new Player(nanoid());\r\n      await testingTown.addPlayer(player1);\r\n      await testingTown.addPlayer(player2);\r\n\r\n\r\n\r\n      const newLocation: UserLocation = {\r\n        moving: false,\r\n        rotation: 'front',\r\n        x: 9,\r\n        y: 9,\r\n        conversationLabel: oldConversationArea.label,\r\n      };\r\n\r\n      const updateLocation: UserLocation = {\r\n        moving: false,\r\n        rotation: 'front',\r\n        x: 24,\r\n        y: 24,\r\n        conversationLabel: newConversationArea.label,\r\n      };\r\n\r\n      testingTown.updatePlayerLocation(player1, newLocation);\r\n      expect(player1.activeConversationArea?.label).toEqual(oldConversationArea.label);\r\n      expect(testingTown.conversationAreas[0].occupantsByID[0]).toEqual(player1.id);\r\n\r\n      testingTown.updatePlayerLocation(player2, newLocation);\r\n      expect(player2.activeConversationArea?.label).toEqual(oldConversationArea.label);\r\n      expect(testingTown.conversationAreas[0].occupantsByID.length).toEqual(2);\r\n      expect(testingTown.conversationAreas[0].occupantsByID[1]).toEqual(player2.id);\r\n\r\n\r\n      testingTown.updatePlayerLocation(player1, updateLocation);\r\n      expect(player1.activeConversationArea?.label).toEqual(newConversationArea.label);\r\n      expect(testingTown.conversationAreas[0].occupantsByID.find(player => player1.id === player)).toBe(undefined);\r\n      expect(testingTown.conversationAreas[1].occupantsByID[0]).toEqual(player1.id);\r\n\r\n     \r\n\r\n    });\r\n  });\r\n  describe('destroySession', () => {\r\n    let testingTown: CoveyTownController;\r\n    beforeEach(async () => {\r\n      const townName = `connectPlayerSocket tests ${nanoid()}`;\r\n      testingTown = CoveyTownsStore.getInstance().createTown(townName, false);\r\n    });\r\n    it('should remove from the conversation area when player session is destroyed', async () => {\r\n      const newConversationArea = TestUtils.createConversationForTesting({\r\n        boundingBox: { x: 10, y: 10, height: 5, width: 5 },\r\n      });\r\n      const result = testingTown.addConversationArea(newConversationArea);\r\n      expect(result).toBe(true);\r\n\r\n      const mockListener = mock<CoveyTownListener>();\r\n      testingTown.addTownListener(mockListener);\r\n\r\n      const player = new Player(nanoid());\r\n      const session = await testingTown.addPlayer(player);\r\n      const newLocation: UserLocation = {\r\n        moving: false,\r\n        rotation: 'front',\r\n        x: 25,\r\n        y: 25,\r\n        conversationLabel: newConversationArea.label,\r\n      };\r\n      testingTown.updatePlayerLocation(player, newLocation);\r\n      expect(mockListener.onConversationAreaUpdated).toHaveBeenCalledTimes(1);\r\n\r\n      testingTown.destroySession(session);\r\n      const playerFound = newConversationArea.occupantsByID.find(\r\n        player_id => player_id === player.id,\r\n      );\r\n      expect(playerFound).toBeUndefined();\r\n    });\r\n  });\r\n});\r\n"},"C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\src\\client\\CoveyTownConversationAPI.test.ts":{"tests":[{"id":"27","name":"Create Conversation Area API Executes without error when creating a new conversation","location":{"start":{"column":3,"line":59}}},{"id":"28","name":"conversationAreaCreateHandler Checks for a valid session token before creating a conversation area","location":{"start":{"column":3,"line":86}}}],"source":"import CORS from 'cors';\r\nimport Express from 'express';\r\nimport http from 'http';\r\nimport { nanoid } from 'nanoid';\r\nimport { AddressInfo } from 'net';\r\nimport { mock, mockReset } from 'jest-mock-extended';\r\nimport CoveyTownController from '../lib/CoveyTownController';\r\nimport CoveyTownsStore from '../lib/CoveyTownsStore';\r\nimport addTownRoutes from '../router/towns';\r\nimport * as requestHandlers from '../requestHandlers/CoveyTownRequestHandlers';\r\nimport { createConversationForTesting } from './TestUtils';\r\nimport TownsServiceClient, { ServerConversationArea } from './TownsServiceClient';\r\n\r\ntype TestTownData = {\r\n  friendlyName: string;\r\n  coveyTownID: string;\r\n  isPubliclyListed: boolean;\r\n  townUpdatePassword: string;\r\n};\r\n\r\ndescribe('Create Conversation Area API', () => {\r\n  let server: http.Server;\r\n  let apiClient: TownsServiceClient;\r\n\r\n  async function createTownForTesting(\r\n    friendlyNameToUse?: string,\r\n    isPublic = false,\r\n  ): Promise<TestTownData> {\r\n    const friendlyName =\r\n      friendlyNameToUse !== undefined\r\n        ? friendlyNameToUse\r\n        : `${isPublic ? 'Public' : 'Private'}TestingTown=${nanoid()}`;\r\n    const ret = await apiClient.createTown({\r\n      friendlyName,\r\n      isPubliclyListed: isPublic,\r\n    });\r\n    return {\r\n      friendlyName,\r\n      isPubliclyListed: isPublic,\r\n      coveyTownID: ret.coveyTownID,\r\n      townUpdatePassword: ret.coveyTownPassword,\r\n    };\r\n  }\r\n\r\n  beforeAll(async () => {\r\n    const app = Express();\r\n    app.use(CORS());\r\n    server = http.createServer(app);\r\n\r\n    addTownRoutes(server, app);\r\n    await server.listen();\r\n    const address = server.address() as AddressInfo;\r\n\r\n    apiClient = new TownsServiceClient(`http://127.0.0.1:${address.port}`);\r\n  });\r\n  afterAll(async () => {\r\n    await server.close();\r\n  });\r\n  it('Executes without error when creating a new conversation', async () => {\r\n    const testingTown = await createTownForTesting(undefined, true);\r\n    const testingSession = await apiClient.joinTown({\r\n      userName: nanoid(),\r\n      coveyTownID: testingTown.coveyTownID,\r\n    });\r\n    await apiClient.createConversationArea({\r\n      conversationArea: createConversationForTesting(),\r\n      coveyTownID: testingTown.coveyTownID,\r\n      sessionToken: testingSession.coveySessionToken,\r\n    });\r\n  });\r\n});\r\ndescribe('conversationAreaCreateHandler', () => {\r\n\r\n  const mockCoveyTownStore = mock<CoveyTownsStore>();\r\n  const mockCoveyTownController = mock<CoveyTownController>();\r\n  beforeAll(() => {\r\n    // Set up a spy for CoveyTownsStore that will always return our mockCoveyTownsStore as the singleton instance\r\n    jest.spyOn(CoveyTownsStore, 'getInstance').mockReturnValue(mockCoveyTownStore);\r\n  });\r\n  beforeEach(() => {\r\n    // Reset all mock calls, and ensure that getControllerForTown will always return the same mock controller\r\n    mockReset(mockCoveyTownController);\r\n    mockReset(mockCoveyTownStore);\r\n    mockCoveyTownStore.getControllerForTown.mockReturnValue(mockCoveyTownController);\r\n  });\r\n  it('Checks for a valid session token before creating a conversation area', ()=>{\r\n    const coveyTownID = nanoid();\r\n    const conversationArea :ServerConversationArea = { boundingBox: { height: 1, width: 1, x:1, y:1 }, label: nanoid(), occupantsByID: [], topic: nanoid() };\r\n    const invalidSessionToken = nanoid();\r\n\r\n    // Make sure to return 'undefined' regardless of what session token is passed\r\n    mockCoveyTownController.getSessionByToken.mockReturnValueOnce(undefined);\r\n\r\n    requestHandlers.conversationAreaCreateHandler({\r\n      conversationArea,\r\n      coveyTownID,\r\n      sessionToken: invalidSessionToken,\r\n    });\r\n    expect(mockCoveyTownController.getSessionByToken).toBeCalledWith(invalidSessionToken);\r\n    expect(mockCoveyTownController.addConversationArea).not.toHaveBeenCalled();\r\n  });\r\n});"}},"projectRoot":"C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","_comment":"This config was generated using 'stryker init'. Please take a look at: https://stryker-mutator.io/docs/stryker-js/configuration/ for more information","packageManager":"npm","reporters":["html","clear-text","json","progress"],"checkers":["typescript"],"tsconfigFile":"tsconfig.json","testRunner":"jest","coverageAnalysis":"perTest","timeoutFactor":5,"tempDirName":"strykerTmpDir","timeoutMS":15000,"mutate":["src/lib/CoveyTownController.ts:123-126","src/lib/CoveyTownController.ts:140-156","src/lib/CoveyTownController.ts:168-175","src/lib/CoveyTownController.ts:191-210","src/lib/CoveyTownController.ts:219-225","src/types/Player.ts:56-65","src/requestHandlers/CoveyTownRequestHandlers.ts:184-199","src/router/towns.ts:112-127"],"allowConsoleColors":true,"checkerNodeArgs":[],"maxTestRunnerReuse":0,"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"logTests":true,"maxTestsToLog":3},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*","C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\node_modules\\@stryker-mutator\\core\\dist\\src\\reporters\\index.js"],"appendPlugins":[],"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":"{test,src,lib}/**/*.{js,ts,jsx,tsx,html,vue}","symlinkNodeModules":true,"cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"dryRunTimeoutMinutes":5,"warnings":true,"disableBail":false,"configFile":"C:\\Users\\James\\OneDrive\\Desktop\\GitHub\\hw3-handout\\stryker.conf.json","jest":{"projectType":"custom","enableFindRelatedTests":true}},"framework":{"name":"StrykerJS","version":"5.6.1","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/jest-runner":"5.6.1","@stryker-mutator/typescript-checker":"5.6.1","jest":"26.6.3","typescript":"4.5.5","ts-jest":"26.5.6"}}}